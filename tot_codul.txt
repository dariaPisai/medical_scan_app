// codul folosit pentru antrenarea modelului fără ponderi inițiale


import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torchvision.models import ResNet50_Weights 
from torch.utils.data import DataLoader, random_split, Subset
from sklearn.metrics import classification_report, confusion_matrix
from torch.cuda.amp import GradScaler, autocast 
import numpy as np
import cv2
import os
import imutils 
from tqdm.notebook import tqdm
import time
import copy
import matplotlib.pyplot as plt

print("Libraries imported.")


INPUT_TRAIN_DIR = './Training' 

OUTPUT_PREPROC_DIR = './Training_preproc'

# --- Hiperparametrii ---

IMG_SIZE = 224


NUM_CLASSES = 4       
BATCH_SIZE = 32
NUM_EPOCHS = 25      
LEARNING_RATE = 0.001
VAL_SPLIT = 0.2       

# --- Device Setup ---
DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(f"Using device: {DEVICE}")

#  pentru speedup pe GPU
if torch.cuda.is_available():
    torch.backends.cudnn.benchmark = True
    print("cuDNN Benchmark enabled.")

# --- unde se salvează modelul ---
MODEL_SAVE_PATH = 'resnet50_tumor_classifier_best_val_acc.pth'

SEED = 42
np.random.seed(SEED)
torch.manual_seed(SEED)
if torch.cuda.is_available():
    torch.cuda.manual_seed(SEED)

print("Configuration set.")


# %%
# --- Cropping Function ---
def crop_img(img, target_size):
    """
    Finds the presumed tumor area based on contours, crops, and resizes the image.
    Handles grayscale, color, and alpha channel images.
    Returns None if cropping or resizing fails critically.
    """
    # validarea inputului
    if img is None:
        print("Warning: crop_img received a None image.")
        return None
    if not isinstance(img, np.ndarray) or img.ndim < 2:
         print(f"Warning: crop_img received invalid image data type/dims: {type(img)}, ndim={img.ndim if isinstance(img, np.ndarray) else 'N/A'}")
         return None
    if img.shape[0] <= 0 or img.shape[1] <= 0:
        print(f"Warning: crop_img received image with invalid dimensions: {img.shape}")
        return None

    # imaginea trb sa fie BGR
    if len(img.shape) == 2 or img.shape[2] == 1: # Grayscale
        img_bgr = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    elif img.shape[2] == 4: # BGRA
        img_bgr = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
    elif img.shape[2] == 3: # BGR
        img_bgr = img
    else:
        print(f"Warning: Unsupported number of channels ({img.shape[2]}) in image. Cannot process.")
        # Fallback: Resize original image if dimensions are valid
        try:
            return cv2.resize(img, (target_size, target_size))
        except Exception as e:
            print(f"  Fallback resize also failed: {e}")
            return None


    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)

    # thresholding
    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]
    thresh = cv2.erode(thresh, None, iterations=2)
    thresh = cv2.dilate(thresh, None, iterations=2)

    # gasirea contururilor
    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    if not cnts:
        print("Warning: No contours found. Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for no-contour image: {e}")
             return None # Indicate failure

    # gasim cel mai mare conturi si dreptunghiul in care se incadreaza
    c = max(cnts, key=cv2.contourArea)
    extLeft = tuple(c[c[:, :, 0].argmin()][0])
    extRight = tuple(c[c[:, :, 0].argmax()][0])
    extTop = tuple(c[c[:, :, 1].argmin()][0])
    extBot = tuple(c[c[:, :, 1].argmax()][0])

    
    ADD_PIXELS = 0 
    top = max(0, extTop[1] - ADD_PIXELS)
    bottom = min(img_bgr.shape[0], extBot[1] + ADD_PIXELS)
    left = max(0, extLeft[0] - ADD_PIXELS)
    right = min(img_bgr.shape[1], extRight[0] + ADD_PIXELS)


    if top >= bottom or left >= right:
        print(f"Warning: Invalid crop dimensions calculated ({top}:{bottom}, {left}:{right}). Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for invalid crop dims: {e}")
             return None 

    cropped_img = img_bgr[top:bottom, left:right].copy()

   
    try:
        resized_img = cv2.resize(cropped_img, (target_size, target_size))
        return resized_img
    except Exception as e:
        print(f"Error resizing cropped image: {e}. Image shape was {cropped_img.shape}")
        try:
             print("  Attempting resize of original image instead.")
             return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e_orig:
             print(f"    Resize of original image also failed: {e_orig}")
             return None 


# --- preprocesare ---
print(f"\nStarting preprocessing...")
print(f"Input directory: {INPUT_TRAIN_DIR}")
print(f"Output directory: {OUTPUT_PREPROC_DIR}")
print(f"Target image size: {IMG_SIZE}x{IMG_SIZE}")

dataset_type = 'Training'
input_dir_path = INPUT_TRAIN_DIR 
output_dir_path_base = os.path.join(OUTPUT_PREPROC_DIR, dataset_type)

print(f"\nProcessing dataset type: {dataset_type}")
if not os.path.isdir(input_dir_path):
    print(f"ERROR: Input directory not found: {input_dir_path}. Please check the INPUT_TRAIN_DIR path.")
else:
    sub_dirs = [d for d in os.listdir(input_dir_path) if os.path.isdir(os.path.join(input_dir_path, d))]
    if not sub_dirs:
         print(f"ERROR: No class subdirectories found in {input_dir_path}.")
    else:
        print(f"Found class subdirectories: {sub_dirs}")

        for class_dir in tqdm(sub_dirs, desc=f"Processing classes in {dataset_type}"):
            input_class_path = os.path.join(input_dir_path, class_dir)
            output_class_path = os.path.join(output_dir_path_base, class_dir)

            if not os.path.exists(output_class_path):
                os.makedirs(output_class_path)
                print(f"Created output directory: {output_class_path}")

            image_files = [f for f in os.listdir(input_class_path) if os.path.isfile(os.path.join(input_class_path, f))]

            num_processed = 0
            num_skipped = 0
            for img_file in tqdm(image_files, desc=f"  Processing images in {class_dir}", leave=False):
                input_img_path = os.path.join(input_class_path, img_file)
                output_img_path = os.path.join(output_class_path, img_file)

                try:
                    image = cv2.imread(input_img_path)
                    if image is None:
                        print(f"Warning: Could not read image {input_img_path}. Skipping.")
                        num_skipped += 1
                        continue

                    processed_img = crop_img(image, IMG_SIZE)

                    if processed_img is None:
                         print(f"Warning: Preprocessing failed for image {input_img_path}. Skipping save.")
                         num_skipped += 1
                         continue
                    
                    success = cv2.imwrite(output_img_path, processed_img)
                    if not success:
                        print(f"Warning: Failed to write processed image to {output_img_path}. Skipping.")
                        num_skipped += 1
                    else:
                         num_processed += 1

                except Exception as e:
                    print(f"Error processing image {input_img_path}: {e}")
                    num_skipped += 1
            print(f"  Finished class {class_dir}: Processed={num_processed}, Skipped/Errors={num_skipped}")

    print(f"\nPreprocessing for '{dataset_type}' complete. Processed images saved to: {output_dir_path_base}")


# se definesc transformarile cu augmentare/fără
imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]

data_transforms = {
    'train': transforms.Compose([
        transforms.RandomResizedCrop(IMG_SIZE, scale=(0.8, 1.0)), 
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(15),
        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.1, hue=0.1),
        transforms.ToTensor(), 
        transforms.Normalize(imagenet_mean, imagenet_std) 
    ]),
    'val': transforms.Compose([
        transforms.Resize(IMG_SIZE + 32), 
        transforms.CenterCrop(IMG_SIZE), 
        transforms.ToTensor(),
        transforms.Normalize(imagenet_mean, imagenet_std)
    ])
}

print("Training and Validation data transforms defined.")



PREPROCESSED_TRAIN_DATA_DIR = os.path.join(OUTPUT_PREPROC_DIR, 'Training')

print(f"Loading data from PREPROCESSED directory: {PREPROCESSED_TRAIN_DATA_DIR}")

try:
    full_dataset_train_transforms = datasets.ImageFolder(PREPROCESSED_TRAIN_DATA_DIR,
                                                        transform=data_transforms['train'])

    full_dataset_val_transforms = datasets.ImageFolder(PREPROCESSED_TRAIN_DATA_DIR,
                                                      transform=data_transforms['val'])

    print(f"Successfully loaded PREPROCESSED dataset structure.")
    print(f"Total images found: {len(full_dataset_train_transforms)}") 

    DETECTED_CLASSES = full_dataset_train_transforms.classes
    CLASS_TO_IDX = full_dataset_train_transforms.class_to_idx
    IDX_TO_CLASS = {v: k for k, v in CLASS_TO_IDX.items()}
    print(f"Classes detected: {DETECTED_CLASSES}")
    print(f"Class to index mapping: {CLASS_TO_IDX}")

    if NUM_CLASSES != len(DETECTED_CLASSES):
         print(f"WARNING: NUM_CLASSES in config ({NUM_CLASSES}) does not match detected classes ({len(DETECTED_CLASSES)}). Adjust NUM_CLASSES.")
        


except FileNotFoundError:
    print(f"ERROR: PREPROCESSED dataset folder not found at '{PREPROCESSED_TRAIN_DATA_DIR}'.")
    print("Did the preprocessing step (Cell 6) complete successfully and create this directory?")
    raise 
except Exception as e:
    print(f"An error occurred loading the PREPROCESSED dataset: {e}")
    raise


dataset_size = len(full_dataset_train_transforms)
val_size = int(VAL_SPLIT * dataset_size)
train_size = dataset_size - val_size
print(f"\nSplitting dataset:")
print(f"  Total samples: {dataset_size}")
print(f"  Training samples: {train_size}")
print(f"  Validation samples: {val_size}")


indices = list(range(dataset_size))
np.random.shuffle(indices) 
train_indices, val_indices = indices[:train_size], indices[train_size:]


train_dataset_subset = Subset(full_dataset_train_transforms, train_indices)
val_dataset_subset = Subset(full_dataset_val_transforms, val_indices)


num_workers = os.cpu_count() // 2 if os.cpu_count() else 2 
pin_memory = True if DEVICE.type == 'cuda' else False

dataloaders = {
    'train': DataLoader(train_dataset_subset, batch_size=BATCH_SIZE, shuffle=True,
                        num_workers=num_workers, pin_memory=pin_memory),
    'val': DataLoader(val_dataset_subset, batch_size=BATCH_SIZE, shuffle=False, 
                      num_workers=num_workers, pin_memory=pin_memory)
}
dataset_sizes = {'train': len(train_dataset_subset), 'val': len(val_dataset_subset)}

print(f"\nDataLoaders created for training and validation.")
print(f"Using num_workers={num_workers}, pin_memory={pin_memory}")


print("Loading ResNet50 model...")

model = models.resnet50(weights=None) 
print("Loaded ResNet50 with RANDOM initialization (training from scratch).")

num_ftrs = model.fc.in_features
try:
    model.fc = nn.Linear(num_ftrs, NUM_CLASSES)
    print(f"Replaced final layer: Input features={num_ftrs}, Output classes={NUM_CLASSES}")
except NameError:
     print("ERROR: NUM_CLASSES not defined. Was the Configuration cell run? Was the data loaded successfully to detect classes?")
     raise
except AttributeError:
     print("ERROR: Could not find 'fc' layer in the model. Is it the correct ResNet model?")
     raise


model = model.to(DEVICE)

print(f"Model moved to device: {DEVICE}")


criterion = nn.CrossEntropyLoss()
print(f"Loss function: {criterion}")

optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)
print(f"Optimizer: Adam (lr={LEARNING_RATE})")


scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5)
print(f"Scheduler: ReduceLROnPlateau (factor=0.1, patience=5, monitoring val_loss)")



scaler = GradScaler(enabled=(DEVICE.type == 'cuda'))
print(f"Mixed Precision GradScaler enabled: {scaler.is_enabled()}")


print("\nStarting training and validation loop...")
start_time = time.time()


best_model_wts = copy.deepcopy(model.state_dict())
best_acc = 0.0
history = {'train_loss': [], 'train_acc': [], 'val_loss': [], 'val_acc': []}

for epoch in range(NUM_EPOCHS):
    print(f'\nEpoch {epoch+1}/{NUM_EPOCHS}')
    print('-' * 15)

  
    for phase in ['train', 'val']:
        if phase == 'train':
            model.train()  
            print("--- Training Phase ---")
        else:
            model.eval()   
            print("\n--- Validation Phase ---")
            all_preds_val = []
            all_labels_val = []

        running_loss = 0.0
        running_corrects = 0

        dataloader = dataloaders[phase]
        batch_num = 0
        num_batches = len(dataloader)

        for inputs, labels in tqdm(dataloader, desc=f"{phase.capitalize()} Progress", leave=False):
            batch_num += 1
            inputs = inputs.to(DEVICE, non_blocking=pin_memory) 
            labels = labels.to(DEVICE, non_blocking=pin_memory)

            optimizer.zero_grad(set_to_none=True) 

            with torch.set_grad_enabled(phase == 'train'):
                with autocast(enabled=(DEVICE.type == 'cuda')):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1) 
                    loss = criterion(outputs, labels)

                    if phase == 'train':
                        
                        if torch.isnan(loss):
                            print(f"WARNING: NaN loss detected at epoch {epoch+1}, batch {batch_num}/{num_batches} ({phase}). Skipping batch gradient update.")
                            continue 

                        scaler.scale(loss).backward()

                        scaler.step(optimizer)

                        scaler.update()

            batch_loss = loss.item()
            batch_corrects = torch.sum(preds == labels.data).item()

            running_loss += batch_loss * inputs.size(0)
            running_corrects += batch_corrects

            if phase == 'val':
                all_preds_val.extend(preds.cpu().numpy())
                all_labels_val.extend(labels.cpu().numpy())




        epoch_loss = running_loss / dataset_sizes[phase]
        epoch_acc = running_corrects / dataset_sizes[phase]

        history[f'{phase}_loss'].append(epoch_loss)
        history[f'{phase}_acc'].append(epoch_acc) 

        print(f'{phase.capitalize()} Epoch Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')


        if phase == 'val':
            if isinstance(scheduler, torch.optim.lr_scheduler.ReduceLROnPlateau):
                 scheduler.step(epoch_loss)

            print("\nCalculating Validation Performance Metrics...")
            try:
                report = classification_report(all_labels_val, all_preds_val, target_names=DETECTED_CLASSES, digits=4, zero_division=0)
                cm = confusion_matrix(all_labels_val, all_preds_val)

                print("\nConfusion Matrix:")
                header = f"{'True\\Pred':<15}" + " ".join([f"{cls[:10]:>10}" for cls in DETECTED_CLASSES])
                print(header)
                print('-' * len(header))
                for i, row in enumerate(cm):
                    print(f"{DETECTED_CLASSES[i][:10]:<15}" + " ".join([f"{val:>10}" for val in row]))
                print('-' * len(header))

                print("\nClassification Report (includes Precision, Recall, F1-Score):")
                print(report) 

            except NameError:
                 print("WARNING: Could not calculate sklearn metrics. `DETECTED_CLASSES` not found. Was data loaded correctly?")
            except Exception as e:
                print(f"WARNING: Could not calculate sklearn metrics: {e}")
            print("-" * 15)

            
            if epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
                print(f'** New Best Validation Accuracy: {best_acc:.4f} -> Saving model weights... **')
               


time_elapsed = time.time() - start_time
print(f'\nTraining complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')

print(f'Best Validation Accuracy achieved: {best_acc:.4f}')


print("Loading best model weights...")
model.load_state_dict(best_model_wts)


try:
    torch.save(model.state_dict(), MODEL_SAVE_PATH)
    print(f"\nBest model weights (Val Acc: {best_acc:.4f}) successfully saved to:\n{os.path.abspath(MODEL_SAVE_PATH)}")
    print("This file contains the learned parameters and can be loaded for inference later.")
except Exception as e:
    print(f"\nERROR: Failed to save model weights to {MODEL_SAVE_PATH}: {e}")

print("\nPlotting training and validation history...")

try:
    epochs_range = range(1, NUM_EPOCHS + 1) 

    plt.figure(figsize=(12, 5))

    # Plot Loss
    plt.subplot(1, 2, 1)
    if history['train_loss'] and history['val_loss']:
        plt.plot(epochs_range, history['train_loss'], marker='o', linestyle='-', label='Training Loss')
        plt.plot(epochs_range, history['val_loss'], marker='o', linestyle='-', label='Validation Loss')
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.title('Training and Validation Loss')
        plt.legend()
        plt.grid(True)
    else:
        plt.text(0.5, 0.5, 'No loss data to plot.', ha='center', va='center')


    # Plot Accuracy
    plt.subplot(1, 2, 2)
    if history['train_acc'] and history['val_acc']:
        plt.plot(epochs_range, history['train_acc'], marker='o', linestyle='-', label='Training Accuracy')
        plt.plot(epochs_range, history['val_acc'], marker='o', linestyle='-', label='Validation Accuracy')
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy')
        plt.title('Training and Validation Accuracy')
        plt.legend()
        plt.grid(True)
        plt.ylim(0, 1.05) 
    else:
        plt.text(0.5, 0.5, 'No accuracy data to plot.', ha='center', va='center')


    plt.tight_layout()
    plt.show()
except Exception as e:
     print(f"Could not plot history: {e}")




     //codul folosit pentru antrenarea modelului prin transfer de învățare


import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torchvision.models import ResNet50_Weights # Use recommended weights enum
from torch.utils.data import DataLoader, random_split, Subset
from sklearn.metrics import classification_report, confusion_matrix
from torch.cuda.amp import GradScaler, autocast # For mixed precision
import numpy as np
import cv2
import os
import imutils 
from tqdm.notebook import tqdm 
import time
import copy
import matplotlib.pyplot as plt

print("Libraries imported.")


INPUT_TRAIN_DIR = './Training' # <--- Point this to your ORIGINAL training data directory


OUTPUT_PREPROC_DIR = './Training_preproc'


IMG_SIZE = 224


NUM_CLASSES = 4       
BATCH_SIZE = 32
NUM_EPOCHS = 25       
LEARNING_RATE = 0.001
VAL_SPLIT = 0.2       


DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(f"Using device: {DEVICE}")


if torch.cuda.is_available():
    torch.backends.cudnn.benchmark = True
    print("cuDNN Benchmark enabled.")


MODEL_SAVE_PATH = 'resnet50_tumor_classifier_best_val_acc.pth'


SEED = 42
np.random.seed(SEED)
torch.manual_seed(SEED)
if torch.cuda.is_available():
    torch.cuda.manual_seed(SEED)

print("Configuration set.")


def crop_img(img, target_size):
    """
    Finds the presumed tumor area based on contours, crops, and resizes the image.
    Handles grayscale, color, and alpha channel images.
    Returns None if cropping or resizing fails critically.
    """
    if img is None:
        print("Warning: crop_img received a None image.")
        return None
    if not isinstance(img, np.ndarray) or img.ndim < 2:
         print(f"Warning: crop_img received invalid image data type/dims: {type(img)}, ndim={img.ndim if isinstance(img, np.ndarray) else 'N/A'}")
         return None
    if img.shape[0] <= 0 or img.shape[1] <= 0:
        print(f"Warning: crop_img received image with invalid dimensions: {img.shape}")
        return None

    if len(img.shape) == 2 or img.shape[2] == 1: 
        img_bgr = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    elif img.shape[2] == 4: 
        img_bgr = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
    elif img.shape[2] == 3: 
        img_bgr = img
    else:
        print(f"Warning: Unsupported number of channels ({img.shape[2]}) in image. Cannot process.")
        try:
            return cv2.resize(img, (target_size, target_size))
        except Exception as e:
            print(f"  Fallback resize also failed: {e}")
            return None


    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)

    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]
    thresh = cv2.erode(thresh, None, iterations=2)
    thresh = cv2.dilate(thresh, None, iterations=2)

    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    if not cnts:
        print("Warning: No contours found. Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for no-contour image: {e}")
             return None 

    c = max(cnts, key=cv2.contourArea)
    extLeft = tuple(c[c[:, :, 0].argmin()][0])
    extRight = tuple(c[c[:, :, 0].argmax()][0])
    extTop = tuple(c[c[:, :, 1].argmin()][0])
    extBot = tuple(c[c[:, :, 1].argmax()][0])

    ADD_PIXELS = 0 
    top = max(0, extTop[1] - ADD_PIXELS)
    bottom = min(img_bgr.shape[0], extBot[1] + ADD_PIXELS)
    left = max(0, extLeft[0] - ADD_PIXELS)
    right = min(img_bgr.shape[1], extRight[0] + ADD_PIXELS)

    if top >= bottom or left >= right:
        print(f"Warning: Invalid crop dimensions calculated ({top}:{bottom}, {left}:{right}). Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for invalid crop dims: {e}")
             return None 

    cropped_img = img_bgr[top:bottom, left:right].copy()

    try:
        resized_img = cv2.resize(cropped_img, (target_size, target_size))
        return resized_img
    except Exception as e:
        print(f"Error resizing cropped image: {e}. Image shape was {cropped_img.shape}")
        try:
             print("  Attempting resize of original image instead.")
             return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e_orig:
             print(f"    Resize of original image also failed: {e_orig}")
             return None 


print(f"\nStarting preprocessing...")
print(f"Input directory: {INPUT_TRAIN_DIR}")
print(f"Output directory: {OUTPUT_PREPROC_DIR}")
print(f"Target image size: {IMG_SIZE}x{IMG_SIZE}")


dataset_type = 'Training' 
input_dir_path = INPUT_TRAIN_DIR 
output_dir_path_base = os.path.join(OUTPUT_PREPROC_DIR, dataset_type)

print(f"\nProcessing dataset type: {dataset_type}")
if not os.path.isdir(input_dir_path):
    print(f"ERROR: Input directory not found: {input_dir_path}. Please check the INPUT_TRAIN_DIR path.")
else:
    sub_dirs = [d for d in os.listdir(input_dir_path) if os.path.isdir(os.path.join(input_dir_path, d))]
    if not sub_dirs:
         print(f"ERROR: No class subdirectories found in {input_dir_path}.")
    else:
        print(f"Found class subdirectories: {sub_dirs}")

        for class_dir in tqdm(sub_dirs, desc=f"Processing classes in {dataset_type}"):
            input_class_path = os.path.join(input_dir_path, class_dir)
            output_class_path = os.path.join(output_dir_path_base, class_dir)

            if not os.path.exists(output_class_path):
                os.makedirs(output_class_path)
                print(f"Created output directory: {output_class_path}")

            image_files = [f for f in os.listdir(input_class_path) if os.path.isfile(os.path.join(input_class_path, f))]

            num_processed = 0
            num_skipped = 0
            for img_file in tqdm(image_files, desc=f"  Processing images in {class_dir}", leave=False):
                input_img_path = os.path.join(input_class_path, img_file)
                output_img_path = os.path.join(output_class_path, img_file)



                try:
                    image = cv2.imread(input_img_path)
                    if image is None:
                        print(f"Warning: Could not read image {input_img_path}. Skipping.")
                        num_skipped += 1
                        continue


                    processed_img = crop_img(image, IMG_SIZE)

                    if processed_img is None:
                         print(f"Warning: Preprocessing failed for image {input_img_path}. Skipping save.")
                         num_skipped += 1
                         continue

                    success = cv2.imwrite(output_img_path, processed_img)
                    if not success:
                        print(f"Warning: Failed to write processed image to {output_img_path}. Skipping.")
                        num_skipped += 1
                    else:
                         num_processed += 1

                except Exception as e:
                    print(f"Error processing image {input_img_path}: {e}")
                    num_skipped += 1
            print(f"  Finished class {class_dir}: Processed={num_processed}, Skipped/Errors={num_skipped}")

    print(f"\nPreprocessing for '{dataset_type}' complete. Processed images saved to: {output_dir_path_base}")


imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]

data_transforms = {
    'train': transforms.Compose([

        transforms.RandomResizedCrop(IMG_SIZE, scale=(0.8, 1.0)), # Crop a random portion and resize
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(15),
        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.1, hue=0.1),

        transforms.ToTensor(), 
        transforms.Normalize(imagenet_mean, imagenet_std) 
    ]),
    'val': transforms.Compose([
       
        transforms.Resize(IMG_SIZE + 32), 
        transforms.CenterCrop(IMG_SIZE), 
        transforms.ToTensor(),
        transforms.Normalize(imagenet_mean, imagenet_std)
    ])
}

print("Training and Validation data transforms defined.")


PREPROCESSED_TRAIN_DATA_DIR = os.path.join(OUTPUT_PREPROC_DIR, 'Training')

print(f"Loading data from PREPROCESSED directory: {PREPROCESSED_TRAIN_DATA_DIR}")


try:

    full_dataset_train_transforms = datasets.ImageFolder(PREPROCESSED_TRAIN_DATA_DIR,
                                                        transform=data_transforms['train'])


    full_dataset_val_transforms = datasets.ImageFolder(PREPROCESSED_TRAIN_DATA_DIR,
                                                      transform=data_transforms['val'])

    print(f"Successfully loaded PREPROCESSED dataset structure.")


    DETECTED_CLASSES = full_dataset_train_transforms.classes
    CLASS_TO_IDX = full_dataset_train_transforms.class_to_idx
    IDX_TO_CLASS = {v: k for k, v in CLASS_TO_IDX.items()}
    print(f"Classes detected: {DETECTED_CLASSES}")

    if NUM_CLASSES != len(DETECTED_CLASSES):
         print(f"WARNING: NUM_CLASSES in config ({NUM_CLASSES}) does not match detected classes ({len(DETECTED_CLASSES)}). Adjust NUM_CLASSES.")



except FileNotFoundError:
    print(f"ERROR: PREPROCESSED dataset folder not found at '{PREPROCESSED_TRAIN_DATA_DIR}'.")
    print("Did the preprocessing step (Cell 6) complete successfully and create this directory?")
    raise 
except Exception as e:
    print(f"An error occurred loading the PREPROCESSED dataset: {e}")
    raise

dataset_size = len(full_dataset_train_transforms)
val_size = int(VAL_SPLIT * dataset_size)
train_size = dataset_size - val_size
print(f"\nSplitting dataset:")
print(f"  Total samples: {dataset_size}")
print(f"  Training samples: {train_size}")
print(f"  Validation samples: {val_size}")


indices = list(range(dataset_size))
np.random.shuffle(indices) 
train_indices, val_indices = indices[:train_size], indices[train_size:]


train_dataset_subset = Subset(full_dataset_train_transforms, train_indices)
val_dataset_subset = Subset(full_dataset_val_transforms, val_indices)


num_workers = os.cpu_count() // 2 if os.cpu_count() else 2 
pin_memory = True if DEVICE.type == 'cuda' else False

dataloaders = {
    'train': DataLoader(train_dataset_subset, batch_size=BATCH_SIZE, shuffle=True,
                        num_workers=num_workers, pin_memory=pin_memory),
    'val': DataLoader(val_dataset_subset, batch_size=BATCH_SIZE, shuffle=False,
                      num_workers=num_workers, pin_memory=pin_memory)
}
dataset_sizes = {'train': len(train_dataset_subset), 'val': len(val_dataset_subset)}

print(f"\nDataLoaders created for training and validation.")
print(f"Using num_workers={num_workers}, pin_memory={pin_memory}")


print("Loading ResNet50 model for Fine-Tuning...")


try:
    model = models.resnet50(weights=ResNet50_Weights.DEFAULT) 
    print("Loaded ResNet50 with DEFAULT pre-trained weights (ImageNet).")


except Exception as e:
    print(f"Could not load pre-trained ResNet50 weights: {e}. Aborting.")
    raise


print("Freezing parameters of pre-trained layers...")
for param in model.parameters():
    param.requires_grad = False 
print("Done freezing.")


num_ftrs = model.fc.in_features
print(f"Original classifier input features: {num_ftrs}")

try:
    model.fc = nn.Linear(num_ftrs, NUM_CLASSES) 
    print(f"Replaced final layer (model.fc): Input features={num_ftrs}, Output classes={NUM_CLASSES}")
    print(f"New classifier layer parameters require gradients: {model.fc.weight.requires_grad}")
except NameError:
     print("ERROR: NUM_CLASSES not defined. Was the Configuration cell run?")
     raise
except AttributeError:
     print("ERROR: Could not find 'fc' layer in the model. Is it the correct ResNet model?")
     raise


model = model.to(DEVICE)
print(f"Model (ready for fine-tuning) moved to device: {DEVICE}")

print("\nParameters that require gradients (should be only the new fc layer):")
params_to_update = []
for name, param in model.named_parameters():
    if param.requires_grad:
        print(f"\t{name}")
        params_to_update.append(param)



criterion = nn.CrossEntropyLoss()
print(f"Loss function: {criterion}")



print("Configuring optimizer for the new classifier layer (model.fc) only...")
params_to_optimize = []
for name, param in model.named_parameters():
    if param.requires_grad:
        params_to_optimize.append(param)
        print(f"  Adding param to optimizer: {name}")

if not params_to_optimize:
     print("\nWARNING: No parameters require gradients! Falling back to optimizing all parameters.")
     print("         If fine-tuning the head was intended, check the freezing logic in the model definition cell.")
     optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)
     print(f"Optimizer (fallback): Adam (lr={LEARNING_RATE}) - Optimizing ALL parameters")
else:
     optimizer = optim.Adam(params_to_optimize, lr=LEARNING_RATE)
     print(f"Optimizer: Adam (lr={LEARNING_RATE}) - Optimizing selected parameters")




scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5) 
print(f"Scheduler: ReduceLROnPlateau (factor=0.1, patience=5, monitoring val_loss)")


scaler = GradScaler(enabled=(DEVICE.type == 'cuda'))
print(f"Mixed Precision GradScaler enabled: {scaler.is_enabled()}")


print("\nStarting training and validation loop...")
start_time = time.time()


best_model_wts = copy.deepcopy(model.state_dict())
best_acc = 0.0
history = {'train_loss': [], 'train_acc': [], 'val_loss': [], 'val_acc': []}

for epoch in range(NUM_EPOCHS):
    print(f'\nEpoch {epoch+1}/{NUM_EPOCHS}')
    print('-' * 15)


    for phase in ['train', 'val']:
        if phase == 'train':
            model.train() 
            print("--- Training Phase ---")
        else:
            model.eval()   
            print("\n--- Validation Phase ---")
            all_preds_val = []
            all_labels_val = []

        running_loss = 0.0
        running_corrects = 0

        dataloader = dataloaders[phase]
        batch_num = 0
        num_batches = len(dataloader)

        for inputs, labels in tqdm(dataloader, desc=f"{phase.capitalize()} Progress", leave=False):
            batch_num += 1
            inputs = inputs.to(DEVICE, non_blocking=pin_memory) 
            labels = labels.to(DEVICE, non_blocking=pin_memory)

            optimizer.zero_grad(set_to_none=True)

            with torch.set_grad_enabled(phase == 'train'):
                with autocast(enabled=(DEVICE.type == 'cuda')):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1) 
                    loss = criterion(outputs, labels)


                    if phase == 'train':
                        if torch.isnan(loss):
                            print(f"WARNING: NaN loss detected at epoch {epoch+1}, batch {batch_num}/{num_batches} ({phase}). Skipping batch gradient update.")
                            continue 

                        scaler.scale(loss).backward()


                        scaler.step(optimizer)


                        scaler.update()


            batch_loss = loss.item()
            batch_corrects = torch.sum(preds == labels.data).item()

            running_loss += batch_loss * inputs.size(0)
            running_corrects += batch_corrects


            if phase == 'val':
                all_preds_val.extend(preds.cpu().numpy())
                all_labels_val.extend(labels.cpu().numpy())




        epoch_loss = running_loss / dataset_sizes[phase]
        epoch_acc = running_corrects / dataset_sizes[phase] 

        history[f'{phase}_loss'].append(epoch_loss)
        history[f'{phase}_acc'].append(epoch_acc)

        print(f'{phase.capitalize()} Epoch Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')


        if phase == 'val':

            if isinstance(scheduler, torch.optim.lr_scheduler.ReduceLROnPlateau):
                 scheduler.step(epoch_loss)


            print("\nCalculating Validation Performance Metrics...")
            try:

                report = classification_report(all_labels_val, all_preds_val, target_names=DETECTED_CLASSES, digits=4, zero_division=0)
                cm = confusion_matrix(all_labels_val, all_preds_val)

                print("\nConfusion Matrix:")
                header = f"{'True\\Pred':<15}" + " ".join([f"{cls[:10]:>10}" for cls in DETECTED_CLASSES])
                print(header)
                print('-' * len(header))
                for i, row in enumerate(cm):
                    print(f"{DETECTED_CLASSES[i][:10]:<15}" + " ".join([f"{val:>10}" for val in row]))
                print('-' * len(header))


                print("\nClassification Report (includes Precision, Recall, F1-Score):")
                print(report) 

            except NameError:
                 print("WARNING: Could not calculate sklearn metrics. `DETECTED_CLASSES` not found. Was data loaded correctly?")
            except Exception as e:
                print(f"WARNING: Could not calculate sklearn metrics: {e}")
            print("-" * 15)

            if epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
                print(f'** New Best Validation Accuracy: {best_acc:.4f} -> Saving model weights... **')





time_elapsed = time.time() - start_time
print(f'\nTraining complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')

print(f'Best Validation Accuracy achieved: {best_acc:.4f}')


print("Loading best model weights...")
model.load_state_dict(best_model_wts)


try:
    torch.save(model.state_dict(), MODEL_SAVE_PATH)
    print(f"\nBest model weights (Val Acc: {best_acc:.4f}) successfully saved to:\n{os.path.abspath(MODEL_SAVE_PATH)}")
    print("This file contains the learned parameters and can be loaded for inference later.")
except Exception as e:
    print(f"\nERROR: Failed to save model weights to {MODEL_SAVE_PATH}: {e}")

print("\nPlotting training and validation history...")

try:
    epochs_range = range(1, NUM_EPOCHS + 1) 

    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    if history['train_loss'] and history['val_loss']: 
        plt.plot(epochs_range, history['train_loss'], marker='o', linestyle='-', label='Training Loss')
        plt.plot(epochs_range, history['val_loss'], marker='o', linestyle='-', label='Validation Loss')
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.title('Training and Validation Loss')
        plt.legend()
        plt.grid(True)
    else:
        plt.text(0.5, 0.5, 'No loss data to plot.', ha='center', va='center')


    plt.subplot(1, 2, 2)
    if history['train_acc'] and history['val_acc']: 
        plt.plot(epochs_range, history['train_acc'], marker='o', linestyle='-', label='Training Accuracy')
        plt.plot(epochs_range, history['val_acc'], marker='o', linestyle='-', label='Validation Accuracy')
        plt.xlabel('Epoch')
        plt.ylabel('Accuracy')
        plt.title('Training and Validation Accuracy')
        plt.legend()
        plt.grid(True)
        plt.ylim(0, 1.05) 
    else:
        plt.text(0.5, 0.5, 'No accuracy data to plot.', ha='center', va='center')


    plt.tight_layout()
    plt.show()
except Exception as e:
     print(f"Could not plot history: {e}")



//codul pentru aplicatia principala

import os

import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image 
import io 
import cv2         
import numpy as np 
import imutils    
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image 
import io 
import pydicom 
from pydicom.pixel_data_handlers.util import apply_voi_lut 
import numpy as np
from PIL import Image
import io
from flask import send_file 

from werkzeug.utils import secure_filename 
import uuid 
from datetime import datetime 
from flask import send_from_directory 

from flask import Flask, render_template, request, redirect, url_for, flash 
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_required, current_user
from flask_migrate import Migrate

db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()


login_manager.login_view = 'auth.login' 
login_manager.login_message_category = 'info'

@login_manager.user_loader
def load_user(user_id):

    try:
        from db_models import User
    except ImportError:
        print("ERROR: Could not import User from db_models. Make sure db_models.py exists and is importable.")
        return None
    return User.query.get(int(user_id))



num_classes = 4
img_size = 224
model_weights_path = './ml_training/resnet50_tumor_classifier_best_val_acc.pth'
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(f"Attempting to use device: {device}") #

model = models.resnet50(weights=None) 
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, num_classes)


if os.path.exists(model_weights_path):
    try:
        model.load_state_dict(torch.load(model_weights_path, map_location=device))
        print(f"Successfully loaded trained weights from {model_weights_path}")
    except Exception as e:
        print(f"Error loading weights: {e}. Model will have random weights.")

else:
    print(f"Warning: Weights file not found at {model_weights_path}. Model initialized with random weights.")


model.eval()
model = model.to(device)
print(f"Model ready on device: {device}")


preprocess_after_crop = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])
print("Preprocessing transform (ToTensor, Normalize) created.")

def crop_img(img, target_size=img_size): 
    """
    Finds the presumed tumor area based on contours, crops, and resizes the image.
    Handles grayscale, color, and alpha channel images.
    Returns None if cropping or resizing fails critically.
    Input: NumPy array (BGR format preferred).
    Output: NumPy array (BGR format, resized) or None.
    """
    if img is None:
        print("Warning: crop_img received a None image.")
        return None
    if not isinstance(img, np.ndarray) or img.ndim < 2:
         print(f"Warning: crop_img received invalid image data type/dims: {type(img)}, ndim={img.ndim if isinstance(img, np.ndarray) else 'N/A'}")
         return None
    if img.shape[0] <= 0 or img.shape[1] <= 0:
        print(f"Warning: crop_img received image with invalid dimensions: {img.shape}")
        return None

    if len(img.shape) == 2 or img.shape[2] == 1: # Grayscale
        img_bgr = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    elif img.shape[2] == 4: # BGRA
        img_bgr = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
    elif img.shape[2] == 3: # BGR
        img_bgr = img
    else:
        print(f"Warning: Unsupported number of channels ({img.shape[2]}) in image. Cannot process.")
        try:
            if img.shape[0] > 0 and img.shape[1] > 0:
                 print("  Attempting direct resize as fallback.")
                 return cv2.resize(img, (target_size, target_size))
            else:
                 return None
        except Exception as e:
            print(f"  Fallback resize also failed: {e}")
            return None


    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)

    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]
    thresh = cv2.erode(thresh, None, iterations=2)
    thresh = cv2.dilate(thresh, None, iterations=2)

    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    if not cnts:
        print("Warning: No contours found. Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for no-contour image: {e}")
             return None 

    c = max(cnts, key=cv2.contourArea)
    extLeft = tuple(c[c[:, :, 0].argmin()][0])
    extRight = tuple(c[c[:, :, 0].argmax()][0])
    extTop = tuple(c[c[:, :, 1].argmin()][0])
    extBot = tuple(c[c[:, :, 1].argmax()][0])


    ADD_PIXELS = 0 
    top = max(0, extTop[1] - ADD_PIXELS)
    bottom = min(img_bgr.shape[0], extBot[1] + ADD_PIXELS)
    left = max(0, extLeft[0] - ADD_PIXELS)
    right = min(img_bgr.shape[1], extRight[0] + ADD_PIXELS)

    if top >= bottom or left >= right:
        print(f"Warning: Invalid crop dimensions calculated ({top}:{bottom}, {left}:{right}). Resizing original image.")
        try:
            return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e:
             print(f"  Fallback resize failed for invalid crop dims: {e}")
             return None 

    cropped_img = img_bgr[top:bottom, left:right].copy()


    try:
        resized_img = cv2.resize(cropped_img, (target_size, target_size))
        return resized_img
    except Exception as e:
        print(f"Error resizing cropped image: {e}. Image shape was {cropped_img.shape}")
        try:
             print("  Attempting resize of original image instead.")
             return cv2.resize(img_bgr, (target_size, target_size))
        except Exception as e_orig:
             print(f"    Resize of original image also failed: {e_orig}")
             return None

idx_to_class = {
     0: 'glioma',
     1: 'meningioma',
     2: 'no tumor',
     3: 'pituitary tumor'
}
severity_ranking = {'no tumor': 0, 'pituitary tumor': 1, 'meningioma': 2, 'glioma': 3}
print(f"Using idx_to_class mapping: {idx_to_class}")


ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def apply_dicom_windowing(dicom_dataset):
    """
    Applies VOI LUT or Window Center/Width to DICOM pixel data
    and converts to an 8-bit NumPy array suitable for display.
    """

    try:

        windowed_data = apply_voi_lut(dicom_dataset.pixel_array, dicom_dataset)
        print("Applied VOI LUT or Window Center/Width.")
    except Exception as e:
        print(f"VOI LUT/Windowing failed ({e}), applying simple scaling fallback.")
        pixels = dicom_dataset.pixel_array.astype(float)
        pixels = pixels - np.min(pixels)
        pixels = pixels / (np.max(pixels) + 1e-8) 
        windowed_data = (pixels * 255.0)


    pixels_8bit = np.clip(windowed_data, 0, np.max(windowed_data)) 
    if np.max(pixels_8bit) > 0: 
         pixels_8bit = (pixels_8bit / np.max(pixels_8bit)) * 255.0
    pixels_8bit = pixels_8bit.astype(np.uint8)
    return pixels_8bit

def create_app():
    app = Flask(__name__, instance_relative_config=True) 

    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'default-random-string123-change-me') 
    db_path = os.path.join(app.instance_path, 'database.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    history_upload_folder = os.path.join(app.instance_path, 'history_uploads')
    app.config['HISTORY_UPLOAD_FOLDER'] = history_upload_folder

    try:
        os.makedirs(app.instance_path, exist_ok=True) 
        os.makedirs(app.config['HISTORY_UPLOAD_FOLDER'], exist_ok=True) 
        print(f"Ensured history upload folder exists: {app.config['HISTORY_UPLOAD_FOLDER']}")
    except OSError as e:
        print(f"Error creating instance folder: {e}") 
        pass 

    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)

    try:

        from db_models import AnalysisHistory # Import the history model
        print("AnalysisHistory model imported successfully.")
    except ImportError as e:
        print(f"ERROR: Could not import AnalysisHistory from db_models: {e}")



    try:
        from auth import auth_bp
        app.register_blueprint(auth_bp, url_prefix='/auth')
    except ImportError:
        print("Warning: Could not import or register 'auth' blueprint.")


    @app.route('/')
    @login_required
    def index():
        return render_template('index.html', username=current_user.username)



    @app.route('/analyze', methods=['POST'])
    @login_required
    def analyze():
        if 'scan_file' not in request.files:
            flash('No file part provided.')
            return redirect(url_for('index'))

        file = request.files['scan_file']

        if file.filename == '':
            flash('No file selected.')
            return redirect(url_for('index'))

        original_filename = secure_filename(file.filename)

        if not allowed_file(file.filename):
            flash('Invalid file type. Please upload JPG or JPEG.')
            return redirect(url_for('index'))

        img_bytes_for_saving = None 
        try:
            print(f"Processing file: {file.filename}")
            img_bytes = file.read()
            if not img_bytes:
                 flash('Uploaded file appears to be empty.')
                 return redirect(url_for('index'))
            img_bytes_for_saving = img_bytes 


            np_arr = np.frombuffer(img_bytes, np.uint8)
            img_cv = cv2.imdecode(np_arr, cv2.IMREAD_COLOR) 

            if img_cv is None:
                 flash('Could not decode image file. It might be corrupted or an unsupported format.')
                 return redirect(url_for('index'))

     
            print("Applying crop_img preprocessing...")
            processed_cv_img = crop_img(img_cv, target_size=img_size) 

            if processed_cv_img is None:
                 flash('Image preprocessing (cropping/resizing) failed. Please check image format or content.')
                 return redirect(url_for('index'))


            img_pil = Image.fromarray(cv2.cvtColor(processed_cv_img, cv2.COLOR_BGR2RGB))
 

            input_tensor = preprocess_after_crop(img_pil) 
            input_batch = input_tensor.unsqueeze(0).to(device) 

            print("Running model inference...")
            with torch.no_grad():
                output = model(input_batch)

            probabilities = torch.nn.functional.softmax(output[0], dim=0)
            confidence, predicted_idx_tensor = torch.max(probabilities, 0)
            predicted_idx = predicted_idx_tensor.item()

            predicted_class_name = idx_to_class.get(predicted_idx, "Unknown Index")
            predicted_severity = severity_ranking.get(predicted_class_name, -1)
            confidence_percent = confidence.item() * 100

            print(f"Prediction: {predicted_class_name}, Confidence: {confidence_percent:.2f}%")

            file_extension = original_filename.rsplit('.', 1)[1].lower()
            unique_filename = f"{uuid.uuid4()}.{file_extension}"
            save_path = os.path.join(app.config['HISTORY_UPLOAD_FOLDER'], unique_filename)

            try:
                with open(save_path, 'wb') as f:
                    f.write(img_bytes_for_saving) 
                print(f"Original image saved to: {save_path}")

                new_record = AnalysisHistory(
                    user_id=current_user.id,
                    original_filename=original_filename,
                    stored_filename=unique_filename,
                    predicted_class=predicted_class_name,
                    confidence=confidence_percent, # This already has *100 applied
                    severity_level=predicted_severity
                )
                db.session.add(new_record)
                db.session.commit()
                print("Analysis record saved to database.")
                flash('Analysis successful and saved to history.', 'success')

            except Exception as save_err:
                print(f"Error saving file or DB record: {save_err}")
                db.session.rollback()
                flash('Analysis complete, but failed to save history record.', 'error')

            return render_template('index.html',
                                username=current_user.username,
                                prediction=predicted_class_name,
                                filename=original_filename, 
                                confidence=f"{confidence_percent:.2f}",
                                severity=predicted_severity)

        except ImportError:
            print("ERROR: AnalysisHistory model not available for saving.")
            flash('Analysis complete, but history feature is unavailable.', 'warning')
            return render_template('index.html',
                                username=current_user.username,
                                prediction=predicted_class_name,
                                filename=original_filename,
                                confidence=f"{confidence_percent:.2f}",
                                severity=predicted_severity)
        except Exception as e:
            print(f"Error during analysis for file {original_filename}: {e}")
            import traceback
            traceback.print_exc() 
            flash(f'An error occurred during image analysis. Please check the logs or contact support.')
            return render_template('index.html',
                                username=current_user.username)
        


    @app.route('/history')
    @login_required
    def history():
        try:
            user_history = AnalysisHistory.query.filter_by(user_id=current_user.id)\
                                                .order_by(AnalysisHistory.timestamp.desc())\
                                                .all()
            return render_template('history.html',
                                   username=current_user.username,
                                   history=user_history)
        except Exception as e:
            print(f"Error fetching history for user {current_user.id}: {e}")
            flash("Could not retrieve analysis history.", "error")
            return render_template('history.html', username=current_user.username, history=[])


    @app.route('/history_images/<path:filename>')
    @login_required
    def get_history_image(filename):
        record = AnalysisHistory.query.filter_by(user_id=current_user.id, stored_filename=filename).first_or_404()


        try:
            print(f"Serving image: {filename} from {app.config['HISTORY_UPLOAD_FOLDER']}")
            return send_from_directory(
                app.config['HISTORY_UPLOAD_FOLDER'],
                filename,
                as_attachment=False 
            )
        except FileNotFoundError:
             print(f"History image file physically not found: {filename}")
             from flask import abort
             abort(404)
        except Exception as e:
             print(f"Error serving image {filename}: {e}")
             from flask import abort
             abort(500) 

    
    @app.route('/dicom_converter')
    @login_required 
    def dicom_converter_form():
        """Renders the upload form for DICOM conversion."""
        return render_template('dicom_converter.html', username=current_user.username)

    @app.route('/convert_dicom', methods=['POST'])
    @login_required
    def convert_dicom():
        """Handles DICOM file upload, converts to JPG, and sends for download."""
        if 'dicom_file' not in request.files:
            flash('No file part provided.', 'error')
            return redirect(url_for('dicom_converter_form'))

        file = request.files['dicom_file']

        if file.filename == '':
            flash('No file selected.', 'error')
            return redirect(url_for('dicom_converter_form'))

        if not (file.filename.lower().endswith('.dcm') or file.filename.lower().endswith('.dicom')):
            flash('Invalid file type. Please upload a .dcm or .dicom file.', 'error')
            return redirect(url_for('dicom_converter_form'))

        original_filename_base = os.path.splitext(secure_filename(file.filename))[0]
        output_filename = f"{original_filename_base}.jpg"

        try:
            dicom_dataset = pydicom.dcmread(file.stream)

            if 'PixelData' not in dicom_dataset:
                 flash('DICOM file does not contain pixel data.', 'error')
                 return redirect(url_for('dicom_converter_form'))

            pixel_array = dicom_dataset.pixel_array

            if pixel_array.ndim > 2:
                print(f"Multi-frame DICOM detected (shape: {pixel_array.shape}). Selecting middle frame.")
                middle_frame_index = pixel_array.shape[0] // 2
                single_frame_pixels = pixel_array[middle_frame_index]
                flash(f'Multi-frame DICOM detected. Converted middle frame ({middle_frame_index+1}/{pixel_array.shape[0]}).', 'info')
            elif pixel_array.ndim == 2:
                single_frame_pixels = pixel_array
            else:
                flash('Unsupported pixel data dimensions.', 'error')
                return redirect(url_for('dicom_converter_form'))

            pixels_8bit = apply_dicom_windowing(dicom_dataset)
            if pixel_array.ndim > 2:
                 single_frame_pixels = pixels_8bit[middle_frame_index] 
            else:
                 single_frame_pixels = pixels_8bit

            if not single_frame_pixels.flags['C_CONTIGUOUS']:
                single_frame_pixels = np.ascontiguousarray(single_frame_pixels)

            img = Image.fromarray(single_frame_pixels).convert('L') 

            img_io = io.BytesIO() 
            img.save(img_io, 'JPEG', quality=90) 
            img_io.seek(0) 

            return send_file(
                img_io,
                mimetype='image/jpeg',
                as_attachment=True,
                download_name=output_filename 
            )

        except Exception as e:
            print(f"Error during DICOM conversion: {e}")
            flash(f'An error occurred during conversion: {str(e)}', 'error')
            return redirect(url_for('dicom_converter_form'))




    return app





//codul pentru partea de autentificare

from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash 
from app import db 
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from db_models import User

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign up')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('That username is already taken. Please choose a different one.')
        

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('That email is already registered. Please use another email address.')
        
class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember = BooleanField('Remember Me')
    submit = SubmitField('Login')



auth_bp = Blueprint('auth', __name__, template_folder='templates/auth')

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user = User(username=form.username.data, email=form.email.data, password_hash=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash('Your account has been created! You are now able to log in.', 'success')
        return redirect(url_for('auth.login'))
    return render_template('register.html', title='Register', form=form)


@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    register_form = RegistrationForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password_hash, form.password.data):
            login_user(user, remember=form.remember.data)
            flash('Login successful!', 'success')
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('index'))
        else:
            flash('Login Unsuccessful. Please check your email or password.', 'danger')
    return render_template('auth/login.html', title="Login", form=form, register_form=register_form)
    
@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('auth.login'))

//codul pentru crearea bazei de date si pentru legarea acesteia cu aplicatia principala

from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from app import db
from datetime import datetime

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True, nullable=False)
    email = db.Column(db.String(120), index=True, unique=True, nullable=False)
    password_hash = db.Column(db.String(256))


    history_records = db.relationship('AnalysisHistory', backref='user', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    def __repr__(self):
        return f'<User {self.username}'
    

class AnalysisHistory(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False) # The link
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    original_filename = db.Column(db.String(200), nullable=False)
    stored_filename = db.Column(db.String(100), nullable=False, unique=True)
    predicted_class = db.Column(db.String(50), nullable=False)
    confidence = db.Column(db.Float, nullable=False)
    severity_level = db.Column(db.Integer, nullable=False)

    def __repr__(self):
        return f'<AnalysisHistory {self.id} for User {self.user_id} - {self.original_filename}>'

    

    //codul pentru template-ul de login

{% extends "base.html" %}

{% block title %}Login{% endblock %}

{% block head %}
    {{ super() }}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/auth_style.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{% endblock %}

{% block content %}
<div class="login-container">
    <div class="login-info-panel" id="login-info-panel">
        <div class="info-content">
            <h1>Your own diagnosis assistant</h1>
            <p>Get your own personalised diagnosis and medical report based on a simple MRI scan!</p>
        </div>
    </div>
    <div class="login-form-panel" id="login-form-panel">
        <div class="form-content">
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    <div class="flash-messages">
                    {% for category, message in messages %}
                        <div class="flash {{ category }}">{{ message }}</div>
                    {% endfor %}
                    </div>
                {% endif %}
            {% endwith %}
            
            <!-- Login Section -->
            <div id="login-section">
                <div class="form-header">
                    <h2>Sign in</h2>
                    <p>Access your account</p>
                </div>
                
                <!-- Login Form -->
                <form method="POST" action="{{ url_for('auth.login') }}">
                    {{ form.hidden_tag() }}
                    
                    <div class="form-group">
                        <label class="form-label" for="{{ form.email.id }}">Email</label>
                        <input class="form-input" 
                               type="email" 
                               id="{{ form.email.id }}" 
                               name="{{ form.email.name }}" 
                               placeholder="Enter your email" 
                               autocomplete="username"
                               required>
                    </div>
                    
                    <div class="form-group">
                        <div class="label-container">
                            <label class="form-label" for="{{ form.password.id }}">Password</label>
                            <a class="password-toggle" href="#">Show</a>
                        </div>
                        <input class="form-input" 
                               type="password" 
                               id="{{ form.password.id }}" 
                               name="{{ form.password.name }}" 
                               placeholder="Enter your password" 
                               autocomplete="current-password"
                               required>
                    </div>
                    
                    <div class="form-options">
                        <div class="remember-me">
                            <input type="checkbox" id="{{ form.remember.id }}" name="{{ form.remember.name }}">
                            <label for="{{ form.remember.id }}">Remember me</label>
                        </div>
                        <a href="#" class="forgot-password">Forgot password?</a>
                    </div>
                    
                    <button type="submit" class="login-button">Login</button>
                </form>
                
                <div class="form-toggle-link">
                    <p>Don't have an account? <a href="#" id="show-register-form">Sign up</a></p>
                </div>
            </div>
            
            <!-- Register Section -->
            <div id="register-section">
                <div class="form-header">
                    <h2>Create Account</h2>
                    <p>Join our medical diagnosis platform</p>
                </div>
                
                <!-- Register Form -->
                <form method="POST" action="{{ url_for('auth.register') }}">
                    {{ register_form.hidden_tag() }}
                    
                    <div class="form-group">
                        <label class="form-label" for="{{ register_form.username.id }}">Username</label>
                        <input class="form-input" type="text" id="{{ register_form.username.id }}" name="{{ register_form.username.name }}" placeholder="Choose a username" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="{{ register_form.email.id }}">Email</label>
                        <input class="form-input" type="email" id="{{ register_form.email.id }}" name="{{ register_form.email.name }}" placeholder="Enter your email" required>
                    </div>
                    
                    <div class="form-group">
                        <div class="label-container">
                            <label class="form-label" for="{{ register_form.password.id }}">Password</label>
                            <a class="password-toggle" href="#">Show</a>
                        </div>
                        <input class="form-input" type="password" id="{{ register_form.password.id }}" name="{{ register_form.password.name }}" placeholder="Create a password" required>
                    </div>
                    
                    <div class="form-group">
                        <div class="label-container">
                            <label class="form-label" for="{{ register_form.confirm_password.id }}">Confirm Password</label>
                            <a class="password-toggle" href="#">Show</a>
                        </div>
                        <input class="form-input" type="password" id="{{ register_form.confirm_password.id }}" name="{{ register_form.confirm_password.name }}" placeholder="Confirm your password" required>
                    </div>
                    
                    <button type="submit" class="register-button">Register</button>
                </form>
                
                <div class="form-toggle-link">
                    <p>Already have an account? <a href="#" id="show-login-form">Sign in</a></p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
    {{ super() }}
    <script src="{{ url_for('static', filename='js/form-toggle.js') }}"></script>
{% endblock %}


//codul pentru template-ul de home 

{% extends "base.html" %}

{% block title %}Analyze Scan{% endblock %}

{% block head %}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index_style.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{% endblock %}

{% block content %}
<div class="app-layout">
    <!-- Expandable Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <i class="fas fa-brain sidebar-icon"></i>
            <span class="sidebar-text">Medical Scan App</span>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="{{ url_for('index') }}" class="active"><i class="fas fa-microscope sidebar-icon"></i><span class="sidebar-text">Analyze Scan</span></a></li>
                <li><a href="{{ url_for('history') }}"><i class="fas fa-history sidebar-icon"></i><span class="sidebar-text">History</span></a></li>
                <li><a href="{{ url_for('dicom_converter_form') }}"><i class="fas fa-file-medical-alt sidebar-icon"></i><span class="sidebar-text">DICOM Converter</span></a></li>
                <li><a href="#"><i class="fas fa-cog sidebar-icon"></i><span class="sidebar-text">Settings</span></a></li>
                <li><a href="{{ url_for('auth.logout') }}"><i class="fas fa-sign-out-alt sidebar-icon"></i><span class="sidebar-text">Logout</span></a></li>
            </ul>
        </nav>
    </aside>

    <main class="main-content">
        <!-- Top Navbar -->
        <header class="main-navbar">
            <div class="navbar-title">
                <i class="fas fa-bars menu-toggle" id="menu-toggle"></i>
                <span>Brain Scan Analysis</span>
            </div>
            <!-- <div class="navbar-user">Welcome, {{ username }}!</div> -->
        </header>

        <section class="analysis-section">
            <div class="panel">
                <div class="panel-header">
                    <h2><i class="fas fa-laptop-medical"></i> Analyze Medical Scan</h2>
                    <p>Upload a brain scan image to receive an AI-powered analysis</p>
                </div>
                
                {% with messages = get_flashed_messages() %}
                    {% if messages %}
                        <div class="flash-messages">
                        {% for message in messages %}
                            <div class="alert">{{ message }}</div>
                        {% endfor %}
                        </div>
                    {% endif %}
                {% endwith %}
                
                <div class="analysis-container">
                    <div class="upload-container">
                        <form method="post" enctype="multipart/form-data" action="{{ url_for('analyze') }}" id="upload-form">
                            <div id="drop-zone">
                                <div class="drop-zone-inner">
                                    <i class="fas fa-cloud-upload-alt drop-zone-icon"></i>
                                    <p class="drop-title">Drag & drop scan image here</p>
                                    <p class="drop-subtitle">or</p>
                                    <div class="file-input-container">
                                        <button type="button" class="browse-button" id="browse-button">Browse Files</button>
                                        <input type="file" id="scan_file" name="scan_file" accept=".png,.jpg,.jpeg" required>
                                    </div>
                                    <p class="file-types">Supported formats: JPG, JPEG, PNG</p>
                                </div>
                            </div>
                            
                            <div id="selected-file-container" class="hidden">
                                <div class="selected-file">
                                    <i class="fas fa-file-image"></i>
                                    <span id="filename-display"></span>
                                    <button type="button" id="remove-file"><i class="fas fa-times"></i></button>
                                </div>
                            </div>
                            
                            <div class="action-buttons">
                                <button type="submit" id="analyze-button" class="primary-button" disabled>
                                    <i class="fas fa-microscope"></i> Analyze Scan
                                </button>
                            </div>
                        </form>
                    </div>

                    <div class="results-container" id="results-container">
                        <div class="results-header">
                            <h3><i class="fas fa-chart-bar"></i> Analysis Results</h3>
                            {% if not prediction %}
                                <p class="no-results">Upload a scan image to see analysis results</p>
                            {% endif %}
                        </div>
                        
                        {% if prediction %}
                            <div class="results-content">
                                <div class="result-item">
                                    <span class="result-label">File:</span>
                                    <span class="result-value">{{ filename }}</span>
                                </div>
                                <div class="result-item">
                                    <span class="result-label">Condition:</span>
                                    <span class="result-value highlight">{{ prediction }}</span>
                                </div>
                                <div class="result-item">
                                    <span class="result-label">Confidence:</span>
                                    <span class="result-value">{{ confidence }}%</span>
                                </div>
                                {% if severity is defined %}
                                <div class="result-item">
                                    <span class="result-label">Severity:</span>
                                    <span class="result-value">{{ severity }}</span>
                                </div>
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </section>
    </main>
</div>
{% endblock %}

{% block scripts %}
    <script src="{{ url_for('static', filename='js/index_page.js') }}"></script>
{% endblock %}


//codul pentru template-ul de baza


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    {% if title %}
        <title>Medical Scan App - {{ title }}</title>
    {% else %}
        <title>Medical Scan App</title>
    {% endif %}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    {% block head %}{% endblock %}
</head>
<body>
    {% block content %}{% endblock %}

    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
    {% block scripts %}{% endblock %}
</body>
</html>

//codul pentru template-ul de history

{% extends "base.html" %}

{% block title %}Analysis History{% endblock %}

{% block head %}
    {{ super() }}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index_style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/history.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{% endblock %}

{% block content %}
<div class="app-layout">
    <!-- Expandable Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <i class="fas fa-brain sidebar-icon"></i>
            <span class="sidebar-text">Medical Scan App</span>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="{{ url_for('index') }}"><i class="fas fa-microscope sidebar-icon"></i><span class="sidebar-text">Analyze Scan</span></a></li>
                <li><a href="{{ url_for('history') }}" class="active"><i class="fas fa-history sidebar-icon"></i><span class="sidebar-text">History</span></a></li>
                <li><a href="{{ url_for('dicom_converter_form') }}"><i class="fas fa-file-medical-alt sidebar-icon"></i><span class="sidebar-text">DICOM Converter</span></a></li>
                <li><a href="#"><i class="fas fa-cog sidebar-icon"></i><span class="sidebar-text">Settings</span></a></li>
                <li><a href="{{ url_for('auth.logout') }}"><i class="fas fa-sign-out-alt sidebar-icon"></i><span class="sidebar-text">Logout</span></a></li>
            </ul>
        </nav>
    </aside>

    <main class="main-content">
        <!-- Top Navbar -->
        <header class="main-navbar">
            <div class="navbar-title">
                <i class="fas fa-bars menu-toggle" id="menu-toggle"></i>
                <span>Analysis History</span>
            </div>
        </header>

        <section class="analysis-section">
            <div class="history-panel">
                <div class="history-panel-header">
                    <h2><i class="fas fa-history"></i> Your Analysis History</h2>
                    <p>Review past brain scan analyses and results</p>
                </div>

                <div class="history-panel-content">
                    {% with messages = get_flashed_messages() %}
                      {% if messages %}
                        <ul class="flashes">
                        {% for message in messages %}
                          <li>{{ message }}</li>
                        {% endfor %}
                        </ul>
                      {% endif %}
                    {% endwith %}

                    {% if history %}
                        <ul class="history-list">
                            {% for record in history %}
                            <li class="history-item">
                                <div class="history-header">
                                    <strong>{{ record.original_filename }}</strong>
                                    <span class="history-timestamp">{{ record.timestamp.strftime('%Y-%m-%d %H:%M:%S') }} UTC</span>
                                </div>
                                <div class="history-content">
                                    <img src="{{ url_for('get_history_image', filename=record.stored_filename) }}"
                                         alt="Scan for {{ record.original_filename }}"
                                         onerror="this.onerror=null; this.src='{{ url_for('static', filename='placeholder_image.png') }}'; this.alt='Image not found';">
                                    <div class="history-details">
                                        <p>
                                            <span class="label">Prediction:</span>
                                            <span class="value prediction-value">{{ record.predicted_class }}</span>
                                        </p>
                                        <p>
                                            <span class="label">Confidence:</span>
                                            <span class="value">{{ "%.2f"|format(record.confidence) }}%</span>
                                        </p>
                                        <p>
                                            <span class="label">Severity Level:</span>
                                            <span class="value">{{ record.severity_level }}</span>
                                            <span class="severity-note">(0=No Tumor, 1=Pituitary, 2=Meningioma, 3=Glioma)</span>
                                        </p>
                                    </div>
                                </div>
                            </li>
                            {% endfor %}
                        </ul>
                    {% else %}
                        <div class="empty-history">
                            <p>You have no analysis history yet.</p>
                            <p>Upload and analyze brain scans to start building your history.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </section>
    </main>
</div>
{% endblock %}

{% block scripts %}
    {{ super() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add sidebar toggle functionality
            const menuToggle = document.getElementById('menu-toggle');
            const sidebar = document.querySelector('.sidebar');
            
            if (menuToggle && sidebar) {
                menuToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('expanded');
                    document.querySelector('.main-content').classList.toggle('sidebar-expanded');
                });
            }
        });
    </script>
{% endblock %}

// codul pentru template-ul de convertor dicom


{% extends "base.html" %}

{% block title %}DICOM to JPG Converter{% endblock %}


{% block head %}
    {{ super() }}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index_style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/dicom_converter.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{% endblock %}

{% block content %}
<div class="app-layout">
    <!-- Expandable Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <i class="fas fa-brain sidebar-icon"></i>
            <span class="sidebar-text">Medical Scan App</span>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="{{ url_for('index') }}"><i class="fas fa-microscope sidebar-icon"></i><span class="sidebar-text">Analyze Scan</span></a></li>
                <li><a href="{{ url_for('history') }}"><i class="fas fa-history sidebar-icon"></i><span class="sidebar-text">History</span></a></li>
                <li><a href="{{ url_for('dicom_converter_form') }}" class="active"><i class="fas fa-file-medical-alt sidebar-icon"></i><span class="sidebar-text">DICOM Converter</span></a></li>
                <li><a href="#"><i class="fas fa-cog sidebar-icon"></i><span class="sidebar-text">Settings</span></a></li>
                <li><a href="{{ url_for('auth.logout') }}"><i class="fas fa-sign-out-alt sidebar-icon"></i><span class="sidebar-text">Logout</span></a></li>
            </ul>
        </nav>
    </aside>

    <main class="main-content">
        <!-- Top Navbar -->
        <header class="main-navbar">
            <div class="navbar-title">
                <i class="fas fa-bars menu-toggle" id="menu-toggle"></i>
                <span>DICOM Converter</span>
            </div>
        </header>

        <section class="analysis-section">
            <div class="panel">
                <div class="panel-header">
                    <h2><i class="fas fa-file-medical-alt"></i> DICOM to JPG Converter</h2>
                    <p>Convert medical DICOM files to JPG format for easier viewing and sharing</p>
                </div>
                
                {% with messages = get_flashed_messages(with_categories=true) %}
                    {% if messages %}
                        <div class="flash-messages">
                        {% for category, message in messages %}
                            <div class="alert {{ category }}">{{ message }}</div>
                        {% endfor %}
                        </div>
                    {% endif %}
                {% endwith %}
                
                <div class="panel-content">
                    <div class="converter-notes">
                        <div class="note-title">
                            <i class="fas fa-info-circle"></i> About DICOM Conversion
                        </div>
                        <p>This tool converts DICOM medical imaging files (.dcm) to standard JPG images for easy viewing on any device.</p>
                        <p>For multi-frame DICOM files, only the middle frame/slice will be converted.</p>
                    </div>
                    
                    <form method="post" enctype="multipart/form-data" action="{{ url_for('convert_dicom') }}" id="dicom-form">
                        <div class="upload-area" id="upload-area">
                            <i class="fas fa-file-medical upload-icon"></i>
                            <h3>Drag & Drop DICOM File Here</h3>
                            <p>or</p>
                            <label for="dicom_file" class="browse-button">Browse Files</label>
                            <input type="file" id="dicom_file" name="dicom_file" accept=".dcm,.dicom" required class="file-input">
                        </div>
                        
                        <div id="selected-file-container" style="display: none;">
                            <div class="selected-file">
                                <i class="fas fa-file-medical"></i>
                                <span class="file-name" id="filename-display">No file selected</span>
                                <button type="button" class="remove-file" id="remove-file"><i class="fas fa-times"></i></button>
                            </div>
                        </div>
                        
                        <button type="submit" id="convert-button" class="convert-button" disabled>
                            <i class="fas fa-exchange-alt"></i> Convert to JPG
                        </button>
                    </form>
                    
                    <!-- Preview will be added dynamically by JavaScript -->
                    <div id="preview-container" class="preview-container">
                        <h3>Preview will appear after conversion</h3>
                        <!-- Preview image will be inserted here -->
                    </div>
                </div>
            </div>
        </section>
    </main>
</div>
{% endblock %}

{% block scripts %}
    {{ super() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadArea = document.getElementById('upload-area');
            const fileInput = document.getElementById('dicom_file');
            const selectedFileContainer = document.getElementById('selected-file-container');
            const filenameDisplay = document.getElementById('filename-display');
            const removeFileButton = document.getElementById('remove-file');
            const convertButton = document.getElementById('convert-button');
            const menuToggle = document.getElementById('menu-toggle');
            const sidebar = document.querySelector('.sidebar');
            
            // Menu toggle functionality for sidebar
            if (menuToggle && sidebar) {
                menuToggle.addEventListener('click', function() {
                    sidebar.classList.toggle('expanded');
                    document.querySelector('.main-content').classList.toggle('sidebar-expanded');
                });
            }
            
            // File drag and drop
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            
            uploadArea.addEventListener('dragleave', function() {
                uploadArea.classList.remove('dragover');
            });
            
            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                if (e.dataTransfer.files.length) {
                    fileInput.files = e.dataTransfer.files;
                    handleFileSelect();
                }
            });
            
            // Click on upload area to trigger file input
            uploadArea.addEventListener('click', function() {
                fileInput.click();
            });
            
            // File selection handling
            fileInput.addEventListener('change', handleFileSelect);
            
            function handleFileSelect() {
                if (fileInput.files.length) {
                    const fileName = fileInput.files[0].name;
                    
                    // Check if file is a DICOM file
                    if (!fileName.toLowerCase().endsWith('.dcm') && !fileName.toLowerCase().endsWith('.dicom')) {
                        showAlert('Please select a valid DICOM file (.dcm or .dicom)');
                        fileInput.value = '';
                        return;
                    }
                    
                    filenameDisplay.textContent = fileName;
                    selectedFileContainer.style.display = 'block';
                    convertButton.disabled = false;
                }
            }
            
            // Remove selected file
            removeFileButton.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent click from bubbling to upload area
                fileInput.value = '';
                selectedFileContainer.style.display = 'none';
                convertButton.disabled = true;
            });
            
            // Alert function
            function showAlert(message, type = 'error') {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert ${type}`;
                alertDiv.textContent = message;
                
                const flashContainer = document.querySelector('.flash-messages') || 
                                      (() => {
                                          const container = document.createElement('div');
                                          container.className = 'flash-messages';
                                          document.querySelector('.panel-header').after(container);
                                          return container;
                                      })();
                
                flashContainer.appendChild(alertDiv);
                
                // Remove after 5 seconds
                setTimeout(() => {
                    alertDiv.remove();
                    if (!flashContainer.children.length) {
                        flashContainer.remove();
                    }
                }, 5000);
            }
        });
    </script>
{% endblock %}

// codul pentru css-ul main

:root {
    --accent-red: #E53935; /* Example Red */
    --accent-blue: #03A9F4; /* Example Light Blue */
    --accent-green: #4CAF50; /* Example Green */
    --dark-bg-form: #1a1a2e; /* Example Dark Blue/Purple background for form - ADJUST */
    --dark-input-bg: #2c3e50; /* Example Darker input background - ADJUST */
    --dark-border: #4a4a5e; /* Example Dark border - ADJUST */
    --light-text: #e0e0e0;
    --light-text-muted: #bdc3c7;
    --placeholder-text: #7f8c8d;
    --overlay-gradient: linear-gradient(
        to right,
        rgba(10, 10, 24, 0.2) 0%,
        rgba(10, 10, 24, 0.5) 40%, 
        rgba(10, 10, 24, 0.85) 70%,
        rgba(10, 10, 24, 0.9) 100%
    );
}


* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: sans-serif;
    line-height: 1.6;
    color: #333;
    position: relative;
    background-color: #0a0a18; /* Dark background that matches brain image */
    margin: 0;
    padding: 0;
    min-height: 100vh;
}

.container {
    width: 100%;
    max-width: none;
    margin: 0;
    padding: 0;
    display: flex;
}


.login-container {
    display: flex;
    width: 100%;
    min-height: 100vh;
    margin: 0;
    padding: 0;
    position: relative;
    background-image: url('/static/icons/neural-map.gif');
    background-size: cover;
    background-position: center center;
    background-attachment: fixed; /* Prevent image from moving */
}


.login-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--overlay-gradient);
    z-index: 1;
    pointer-events: none;
    transition: background 0.3s ease;
}


.login-container.hover-info-panel::before {
    background: linear-gradient(
        to right,
        rgba(10, 10, 24, 0) 0%,
        rgba(10, 10, 24, 0.2) 20%,
        rgba(10, 10, 24, 0.4) 40%,
        rgba(10, 10, 24, 0.95) 80%
    ) !important;
}

.login-container.hover-form-panel::before {
    background: linear-gradient(
        to right,
        rgba(10, 10, 24, 0.3) 0%,
        rgba(10, 10, 24, 0.5) 40%,
        rgba(10, 10, 24, 0.6) 70%,
        rgba(10, 10, 24, 0.7) 100%
    ) !important;
}


.login-container.hover-form-panel .login-form-panel .form-content {
    background-color: rgba(26, 26, 46, 0.8);
    box-shadow: 0 12px 28px rgba(0, 0, 0, 0.2);
}


.login-container.hover-info-panel .login-info-panel {
    filter: brightness(1.15);
}


.login-info-panel,
.login-form-panel,
.login-form-panel .form-content {
    transition: all 0.3s ease;
}


.login-info-panel {
    flex: 3;
    margin: 0;
    background: transparent; /* Remove background as it's now on container */
    color: #ffffff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 40px 60px;
    border: none;
    outline: none;
    position: relative;
}

.login-info-panel .info-content {
    max-width: 400px;
}

.login-info-panel .login-placeholder {
    width: 50px;
    height: 50px;
    background-color: #fff;
    border-radius: 50%;
    margin-bottom: 25px;
}

.login-info-panel h2 {
    font-size: 2.5rem;
    margin-bottom: 15px;
}

.login-info-panel p {
    font-size: 1rem;
    opacity: 0.9;
}

.login-form-panel {
    flex: 2;
    margin: 0;
    background: transparent;
    color: var(--light-text);
    display: flex;
    flex-direction: column;
    padding: 20px;
    border: none;
    outline: none;
    position: relative;
    overflow: hidden;
    justify-content: center;
    z-index: 2;
    align-items: center;
    justify-content: center;
}


.login-form-panel .form-header,
.login-form-panel .form-content {
    position: relative; /* Or use higher z-index */
    z-index: 1;
}

.login-form-panel .form-content {
    width: 100%;
    max-width: 400px;
    margin: auto;
    background-color: rgba(26, 26, 46, 0.6); /* More transparent background */
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(8px);
    border: none; /* Remove border */
    transition: all 0.3s ease;

    /* These properties help with the flip animation */
    transform-style: preserve-3d;
    perspective: 1000px;
}

.login-form-panel .form-content:hover {
    background-color: rgba(26, 26, 46, 0.75);
    box-shadow: 0 12px 28px rgba(0, 0, 0, 0.2);
}

.login-form-panel h2 {
    font-size: 2rem;
    margin-bottom: 25px;
    color: #ffffff;
    text-align: left;
}

.login-info-panel .navbar-brand,
.login-info-panel .nav-link {
    color: #ffffff;
}

.login-form-panel .nav-link {
    color: #333333;
}

.signup-link {
    color: #bdc3c7;
    text-decoration: none;
    font-size: 0.9rem;
}

.signup-link:hover {
    text-decoration: underline;
    color: #ffffff;
}

.social-login {
    margin-bottom: 25px;
}

.social-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border-radius: 25px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background-color: rgba(255, 255, 255, 0.1);
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #ffffff;
}

.social-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
}

.social-button .icon {
    width: 20px;
    height: 20px;
    margin-right: 10px;
}

.separator {
    display: flex;
    align-items: center;
    text-align: center;
    margin: 25px 0;
    color: #7f8c8d;
}
.separator::before,
.separator::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid #4a4a5e;
}

.separator span {
    padding: 0 15px;
    font-size: 0.9rem;
}

.form-group {
    position: relative;
    margin-bottom: 20px;
    z-index: 1; 
}


#register-section .form-group {
    margin-bottom: 16px; 
    position: relative;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #202124;
    font-size: 14px;
}


.form-input {
    width: 100%;
    padding: 12px 15px;
    font-size: 16px;
    border: 1px solid #dadce0;
    border-radius: 6px;
    transition: all 0.3s;
    background-color: white;
    color: #202124; 
    box-shadow: none; 
    -webkit-appearance: none; 
    -moz-appearance: none;
    appearance: none;
}

.form-input:focus {
    border-color: #1a73e8;
    box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
    outline: none;
}


.form-input::placeholder {
    color: #9aa0a6;
    opacity: 1;
}


.form-input:-webkit-autofill,
.form-input:-webkit-autofill:hover, 
.form-input:-webkit-autofill:focus {
    -webkit-text-fill-color: #202124;
    -webkit-box-shadow: 0 0 0px 1000px white inset;
    transition: background-color 5000s ease-in-out 0s;
}

.label-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    margin-bottom: 8px;
}

.password-toggle {
    color: #1a73e8;
    font-size: 14px;
    text-decoration: none;
    cursor: pointer;
    transition: color 0.3s;
    margin-left: auto;
    display: inline-block;
    line-height: 1;
}

#register-section .form-group:nth-last-child(2) .password-toggle {
    margin-right: 0; 
}

.password-helper {
    font-size: 0.75rem;
    color: #bdc3c7;
    margin-top: 3px;
}

.form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.remember-me label {
    margin-left: 5px;
    color: #bdc3c7;
}
.forgot-password-link {
    color: #bdc3c7;
    text-decoration: none;
}
.forgot-password-link:hover {
    text-decoration: underline;
    color: #ffffff;
}

.submit-group {
    margin-top: 25px;
}


.submit-button {
    width: 100%;
    padding: 14px 20px;
    border: none;
    border-radius: 25px;
    background: linear-gradient(135deg, rgba(3, 169, 244, 0.8) 0%, rgba(55, 90, 138, 0.8) 100%);
    color: #ffffff;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(3, 169, 244, 0.2);
}

.submit-button:hover:not(:disabled) {
    background: linear-gradient(135deg, #029be0 0%, #2a4a74 100%);
}

.submit-button:disabled {
    background-color: #555; 
    color: #999;
    opacity: 0.7;
    cursor: not-allowed;
}

.form-footer {
    text-align:center;
    margin-top: 30px;
}

.error-message {
    color: red;
    font-size: 0.8rem;
    display: block;
    margin-top: 3px;
}

.alert {
    padding: 10px 15px;
    margin: 10px auto;
    border: 1px solid transparent;
    border-radius: 4px;
    max-width: 450px;
    text-align: center;
    background-color: rgba(26, 26, 46, 0.9);
    border-left: 4px solid #03A9F4;
    color: #ffffff;
    backdrop-filter: blur(5px);
    text-align: center;
    margin: 0 0 20px 0;
}

.alert-success {
    border-color: #4CAF50;
}

.alert-danger {
    border-color: #E53935;
}

.alert-info {
    border-color: #03A9F4;
}

.alert-warning {
    border-color: #FFC107;
}


.site-header {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 10;
    padding: 20px 0;
    background: linear-gradient(to bottom, rgba(10, 10, 24, 0.4) 0%, rgba(10, 10, 24, 0) 100%);
    border: none;
}


.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    position: relative;
    padding: 0;
}

.navbar-brand {
    color: #03A9F4; 
    margin-left: 60px;
    font-weight: 600;
}

.navbar-links {
    margin-right: 40px;
}

.navbar-links ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
}

.navbar-links li {
    margin-left: 15px;
    transition: all 0.3s ease 0s;
}

.navbar-links .nav-link {
    color: #ffffff;
    opacity: 0.9;
    padding: 5px 10px;
}

.navbar-links .nav-link:hover {
    opacity: 1;
}


.auth-links .welcome-user {
    color: #444444;
    font-size: 0.9rem;
    margin-right: 5px;
}


.nav-link.button-register,
.nav-link.button-logout {
    background-color: transparent;
    border: none;
    color: #03A9F4; 
    padding: 5px 10px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.nav-link.button-register:hover,
.nav-link.button-logout:hover {
    background-color: transparent;
    color: #828181;
}

.nav-link.button-logout { 
    color: #e74c3c; 
}
.nav-link.button-logout:hover {
    background-color: #e74c3c; 
    color: #ffffff;
}

.main-content {
    padding: 0; 
}


.flash-messages {
    margin-bottom: 20px; 
}


footer {
    background-color: rgba(10, 10, 24, 0.8);
    margin-top: 0;
    padding: 15px 0;
    color: rgba(255, 255, 255, 0.6);
    position: relative;
    z-index: 5;
}

footer hr {
    border: 0;
    height: 1px;
    background: linear-gradient(to right, rgba(3, 169, 244, 0.2), rgba(3, 169, 244, 0.5), rgba(3, 169, 244, 0.2));
    margin-bottom: 15px;
}

footer {
    text-align: center;
    font-size: 0.9rem;
}

.auth-section {
    display: block;
    opacity: 1;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.auth-section.active {
    display: block;
    opacity: 1;
    transform: translateY(0);
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.auth-section.active {
    animation: fadeIn 0.4s ease forwards;
}

.form-content {
    min-height: 480px; /
}


.form-flip-container {
    perspective: 1000px;
    width: 100%;
    min-height: 500px; 
    height: auto;
    transition: height 0.6s ease-in-out;
}


.form-flipper {
    position: relative;
    width: 100%;
    height: 100%;
    transition: 0.6s;
    transform-style: preserve-3d;
}


.form-flip-container.flipped .form-flipper {
    transform: rotateY(180deg);
}


.auth-section {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    transition: none; 
    transform: none; 
    opacity: 1; 
    display: block; 
}

#login-section {
    z-index: 2;
    transform: rotateY(0deg);
}

#register-section {
    transform: rotateY(180deg);
    background: white;
    border-radius: 10px;
}


.auth-section.active {
    animation: none;
}


.form-content {
    min-height: 550px; 
    overflow: visible; 
}

#login-section.auth-section {
    display: block;
    opacity: 1;
    transform: translateY(0);
    background: white;
    border-radius: 10px;
}


#login-section, #register-section {
    backface-visibility: hidden;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    padding: 20px;
    transition: all 0.3s ease;
}


@media (max-width: 768px) {
    .form-flip-container {
        min-height: 600px; 
    }
    
    .login-container {
        flex-direction: column;
    }
    
    .login-info-panel, .login-form-panel {
        width: 100%;
    }
}

@media (max-width: 1100px) {
    .navbar {
        padding: 0 20px;
    }

    .navbar-brand {
        margin-left: 0;
    }

    .navbar-links {
        margin-right: 0;
    }
    .navbar-links ul li {
        margin-left: 10px; 
        margin-right: 10px;
    }
    .auth-links {
         margin-left: auto; 
    }
    

    .login-container {
        flex-direction: column;
    }
    .login-info-panel {
        min-height: 30vh; 
        padding: 30px;
        flex: none; 
        text-align: center;
    }
    .login-info-panel .info-content {
        max-width: none; 
        margin: auto;
    }
    .login-info-panel .logo-placeholder {
         margin-left: auto;
         margin-right: auto;
    }


    .login-form-panel {
        flex: none; 
        padding: 30px 20px; 
    }
    .login-form-panel .form-content,
    .login-form-panel .form-header {
        max-width: none; 
    }

}


.form-flip-container {
    perspective: 1000px;
    transition: height 0.5s;
    width: 100%;
    margin: 0 auto;
}

.form-flipper {
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.6s;
}

.form-flip-container.flipped .form-flipper {
    transform: rotateY(180deg);
}

#login-section, #register-section {
    backface-visibility: hidden;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    padding: 30px;
}

#login-section {
    z-index: 2;
    transform: rotateY(0deg);
}

#register-section {
    transform: rotateY(180deg);
}


.form-content {
    background-color: rgba(255, 255, 255, 0.95);
    border-radius: 10px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    padding: 30px;
    max-width: 400px;
    width: 100%;
    margin: 0 auto;
}

.form-header {
    text-align: center;
    margin-bottom: 28px; 
    padding-bottom: 10px;
    position: relative;
}

.form-header:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 3px;
    background: linear-gradient(90deg, #1a73e8, #0d47a1);
    border-radius: 2px;
}

.form-header h2 {
    font-size: 28px;
    margin-bottom: 8px;
    color: #1a73e8;
    font-weight: 600;
}

.form-header p {
    color: #5f6368;
    font-size: 16px;
}

.form-group {
    margin-bottom: 20px;
    position: relative;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #202124;
    font-size: 14px;
}

.label-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.form-input {
    width: 100%;
    padding: 12px 15px;
    font-size: 16px;
    border: 1px solid #dadce0;
    border-radius: 6px; 
    transition: all 0.3s;
    background-color: white;
    color: #202124;
    box-shadow: none; 
    -webkit-appearance: none; 
    -moz-appearance: none;
    appearance: none;
}

.form-input:focus {
    border-color: #1a73e8;
    box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
    outline: none;
}


.login-button, .register-button {
    width: 100%;
    padding: 14px 16px;
    background: linear-gradient(135deg, #1a73e8, #0d47a1);
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 20px; 
    text-align: center;
    box-shadow: 0 2px 8px rgba(26, 115, 232, 0.4);
    letter-spacing: 0.5px;
}

.login-button:hover, .register-button:hover {
    background: linear-gradient(135deg, #0d47a1, #1a73e8);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(26, 115, 232, 0.5);
}

.login-button:active, .register-button:active {
    transform: translateY(1px);
    box-shadow: 0 2px 4px rgba(26, 115, 232, 0.4);
}


.remember-me input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    width: 18px;
    height: 18px;
    border: 1px solid #dadce0;
    border-radius: 3px;
    margin-right: 8px;
    position: relative;
    vertical-align: middle;
    cursor: pointer;
}

.remember-me input[type="checkbox"]:checked {
    background-color: #1a73e8;
    border-color: #1a73e8;
}

.remember-me input[type="checkbox"]:checked:after {
    content: "\2713";
    color: white;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 12px;
}

.remember-me label {
    vertical-align: middle;
    cursor: pointer;
}


.form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 15px 0;
}

.remember-me {
    display: flex;
    align-items: center;
}

.remember-me input {
    margin-right: 8px;
}

.forgot-password {
    color: #1a73e8;
    font-size: 14px;
    text-decoration: none;
    transition: color 0.3s;
}

.forgot-password:hover {
    color: #0d47a1;
    text-decoration: underline;
}


.form-toggle-link {
    text-align: center;
    margin-top: 20px;
    font-size: 14px;
    color: #5f6368;
}

.form-toggle-link a {
    color: #1a73e8;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s;
}

.form-toggle-link a:hover {
    color: #0d47a1;
    text-decoration: underline;
}


.password-toggle {
    color: #1a73e8;
    font-size: 14px;
    text-decoration: none;
    cursor: pointer;
    transition: color 0.3s;
}

.password-toggle:hover {
    color: #0d47a1;
    text-decoration: underline;
}


.social-login {
    margin-top: 20px;
}

.social-button {
    width: 100%;
    padding: 12px;
    margin-bottom: 10px;
    border: 1px solid #dadce0;
    border-radius: 4px;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s;
}

.social-button:hover {
    background-color: #f1f3f5;
}

.social-button img {
    width: 18px;
    height: 18px;
    margin-right: 10px;
}

.divider {
    display: flex;
    align-items: center;
    text-align: center;
    margin: 20px 0;
}

.divider::before,
.divider::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid #dadce0;
}

.divider span {
    padding: 0 10px;
    color: #5f6368;
    font-size: 14px;
}


.flash-messages {
    margin-bottom: 20px;
}

.flash {
    padding: 12px 15px;
    margin-bottom: 10px;
    border-radius: 4px;
    font-size: 14px;
}

.flash.success {
    background-color: #e6f4ea;
    color: #137333;
    border-left: 4px solid #137333;
}

.flash.danger {
    background-color: #fce8e6;
    color: #c5221f;
    border-left: 4px solid #c5221f;
}

.flash.info {
    background-color: #e8f0fe;
    color: #1a73e8;
    border-left: 4px solid #1a73e8;
}


@media (max-width: 768px) {
    .form-content {
        padding: 20px;
    }
}

// codul pentru css-ul folosit pt history



.history-list {
    list-style: none;
    padding: 0;
}

.history-item {
    background-color: var(--dark-card);
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.history-header {
    display: flex;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 12px 15px;
    border-bottom: 1px solid var(--border-color);
}

.history-timestamp {
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-left: auto;
}

.history-content {
    display: flex;
    padding: 15px;
    gap: 20px;
}

.history-item img {
    width: 130px;
    height: 130px;
    border-radius: 6px;
    object-fit: cover;
    border: 1px solid var(--border-color);
}

.history-details {
    flex-grow: 1;
}

.history-details p {
    margin: 8px 0;
    display: flex;
    align-items: baseline;
}

.history-details .label {
    width: 120px;
    color: var(--text-secondary);
    font-weight: 500;
}

.history-details .value {
    color: var(--text-primary);
}

.prediction-value {
    color: var(--primary-color);
    font-weight: 600;
}

.severity-note {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin-left: 10px;
}

h1 {
    color: var(--primary-color);
    margin-bottom: 20px;
    font-size: 1.8rem;
    font-weight: 500;
}

.empty-history {
    text-align: center;
    padding: 40px;
    color: var(--text-secondary);
    font-style: italic;
}

.history-panel {
    background-color: var(--dark-bg-secondary);
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    margin-bottom: 20px;
}

.history-panel-header {
    background-color: var(--dark-bg);
    padding: 15px 20px;
    border-bottom: 1px solid var(--dark-border);
}

.history-panel-header h2 {
    margin: 0;
    font-size: 1.2rem;
    color: var(--primary-color);
    display: flex;
    align-items: center;
}

.history-panel-header h2 i {
    margin-right: 10px;
}

.history-panel-header p {
    margin: 5px 0 0;
    font-size: 0.9rem;
    color: var(--text-secondary);
}

.history-panel-content {
    padding: 15px 20px;
}


@media (max-width: 768px) {
    .history-content {
        flex-direction: column;
    }
    
    .history-item img {
        width: 100%;
        height: auto;
        max-height: 200px;
    }
}

// codul folosit pentru css-ul convertorului



.preview-container {
    display: none;
    text-align: center;
    margin-top: 20px;
    padding: 15px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.preview-image {
    max-width: 100%;
    max-height: 400px;
    border-radius: 4px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    margin-bottom: 15px;
}

.upload-area {
    border: 2px dashed var(--border-color);
    border-radius: 8px;
    padding: 30px;
    text-align: center;
    margin-bottom: 20px;
    background-color: rgba(255, 255, 255, 0.05);
    transition: all 0.3s;
}

.upload-area:hover, .upload-area.dragover {
    border-color: var(--primary-color);
    background-color: rgba(3, 169, 244, 0.1);
}

.upload-icon {
    font-size: 48px;
    color: var(--primary-color);
    margin-bottom: 15px;
}

.file-input {
    display: none;
}

.browse-button {
    background-color: rgba(83, 109, 254, 0.2);
    color: var(--accent-color);
    border: 1px solid var(--accent-color);
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
    display: inline-block;
    margin-top: 15px;
}

.browse-button:hover {
    background-color: rgba(83, 109, 254, 0.3);
}

.convert-button {
    background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    margin: 20px auto;
    transition: all 0.3s;
}

.convert-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(83, 109, 254, 0.4);
}

.convert-button:disabled {
    background: linear-gradient(135deg, #BDBDBD, #9E9E9E);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.selected-file {
    background-color: rgba(255, 255, 255, 0.08);
    padding: 10px 15px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    margin-top: 15px;
    gap: 10px;
}

.selected-file i {
    color: var(--primary-color);
    font-size: 1.2rem;
}

.file-name {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.remove-file {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    transition: color 0.3s;
}

.remove-file:hover {
    color: var(--danger-color);
}

.converter-notes {
    background-color: rgba(255, 255, 255, 0.05);
    padding: 15px;
    border-left: 3px solid var(--primary-color);
    border-radius: 4px;
    margin: 20px 0;
    font-size: 0.9rem;
}

.note-title {
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    gap: 8px;
}


.flash-messages {
    margin: 10px 0;
}

.alert {
    padding: 12px 15px;
    margin-bottom: 10px;
    border-radius: 4px;
    font-weight: 500;
    display: flex;
    align-items: center;
}

.alert::before {
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
    margin-right: 10px;
}

.alert.error {
    background-color: rgba(244, 67, 54, 0.2);
    border-left: 3px solid #f44336;
    color: #f44336;
}

.alert.error::before {
    content: '\f071'; 
}

.alert.success {
    background-color: rgba(76, 175, 80, 0.2);
    border-left: 3px solid #4caf50;
    color: #4caf50;
}

.alert.success::before {
    content: '\f00c'; 
}

.alert.info {
    background-color: rgba(3, 169, 244, 0.2);
    border-left: 3px solid #03a9f4;
    color: #03a9f4;
}

.alert.info::before {
    content: '\f05a';
}

.download-button {
    background-color: #4caf50;
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    margin-top: 15px;
    transition: all 0.3s;
}

.download-button:hover {
    background-color: #45a049;
    transform: translateY(-2px);
}


.panel {
    background-color: var(--dark-bg-secondary);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.panel-header {
    background-color: rgba(0, 0, 0, 0.2);
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
}

.panel-header h2 {
    margin: 0;
    font-size: 1.25rem;
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.panel-header p {
    margin: 5px 0 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.panel-content {
    padding: 20px;
}


@media (max-width: 768px) {
    .upload-area {
        padding: 20px;
    }
    
    .upload-icon {
        font-size: 36px;
    }
    
    .convert-button {
        width: 100%;
    }
}

// codul folosit pt css-ul paginii de home

:root {
    --primary-color: #03A9F4;
    --primary-dark: #0288D1;
    --primary-light: #B3E5FC;
    --accent-color: #536DFE;
    --success-color: #4CAF50;
    --warning-color: #FF9800;
    --danger-color: #F44336;
    --dark-bg: #121212;
    --dark-surface: #1E1E1E;
    --dark-card: #252525;
    --text-primary: #F5F5F5;
    --text-secondary: #BDBDBD;
    --border-color: #333;
    --sidebar-width: 60px;
    --sidebar-expanded: 240px;
    --header-height: 64px;
    --transition-speed: 300ms;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: var(--text-primary);
    background-color: var(--dark-bg);
    line-height: 1.6;
}

.app-layout {
    display: flex;
    min-height: 100vh;
    position: relative;
    z-index: 1; 
}


.sidebar {
    width: var(--sidebar-width);
    background-color: var(--dark-surface);
    height: 100vh;
    position: fixed;
    z-index: 100;
    transition: width var(--transition-speed) ease;
    overflow-x: hidden;
    border-right: 1px solid var(--border-color);
}

.sidebar:hover {
    width: var(--sidebar-expanded);
}

.sidebar-header {
    height: var(--header-height);
    display: flex;
    align-items: center;
    padding: 0 20px;
    border-bottom: 1px solid var(--border-color);
}

.sidebar-icon {
    font-size: 1.2rem;
    min-width: 20px;
    display: flex;
    justify-content: center;
    color: var(--primary-color);
}

.sidebar-text {
    margin-left: 15px;
    opacity: 0;
    white-space: nowrap;
    transition: opacity 0.3s ease;
    color: var(--text-primary);
    font-weight: 600;
}

.sidebar:hover .sidebar-text {
    opacity: 1;
}

.sidebar-nav {
    margin-top: 20px;
}

.sidebar-nav ul {
    list-style: none;
}

.sidebar-nav a {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    color: var(--text-secondary);
    text-decoration: none;
    transition: all 0.3s;
}

.sidebar-nav a:hover,
.sidebar-nav a.active {
    background-color: rgba(83, 109, 254, 0.1);
    color: var(--primary-color);
}

.sidebar-nav a.active {
    border-left: 3px solid var(--primary-color);
}

.container {
    width: auto;
    max-width: none;
    margin: 0;
    padding: 0;
    display: block;
}


.main-content {
    flex: 1;
    margin-left: var(--sidebar-width);
    transition: margin-left var(--transition-speed) ease;
    padding: 0; 
}


.main-navbar {
    height: var(--header-height);
    background-color: var(--dark-surface);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 25px;
    border-bottom: 1px solid var(--border-color);
}

.navbar-title {
    display: flex;
    align-items: center;
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--text-primary);
}

.navbar-title span {
    margin-left: 15px;
}

.menu-toggle {
    cursor: pointer;
    color: var(--text-secondary);
    transition: color 0.3s;
}

.menu-toggle:hover {
    color: var(--primary-color);
}

.navbar-user {
    color: var(--text-secondary);
    font-size: 0.9rem;
}


.analysis-section {
    padding: 25px;
    max-width: 1200px;
    margin: 0 auto;
}

.panel {
    background-color: var(--dark-card);
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.panel-header {
    padding: 20px;
    border-bottom: 1px solid var(--border-color);
    text-align: center;
}

.panel-header h2 {
    color: var(--primary-color);
    font-size: 1.5rem;
    font-weight: 500;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.panel-header h2 i {
    margin-right: 10px;
}

.panel-header p {
    color: var(--text-secondary);
    font-size: 0.9rem;
}


.analysis-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    padding: 20px;
}

.upload-container {
    flex: 1;
    min-width: 300px;
}

.results-container {
    flex: 1;
    min-width: 300px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    overflow: hidden;
}


#drop-zone {
    border: 2px dashed var(--border-color);
    border-radius: 8px;
    min-height: 250px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    transition: all 0.3s ease;
    overflow: hidden;
    background-color: rgba(255, 255, 255, 0.03);
}

#drop-zone.dragover {
    border-color: var(--primary-color);
    background-color: rgba(3, 169, 244, 0.1);
}

#drop-zone.file-selected {
    border-color: var(--primary-color);
    background-color: rgba(3, 169, 244, 0.05);
}

.drop-zone-inner {
    padding: 30px 20px;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.drop-zone-icon {
    font-size: 3rem;
    color: var(--primary-color);
    margin-bottom: 15px;
}

.drop-title {
    font-size: 1.2rem;
    color: var(--text-primary);
    margin-bottom: 5px;
}

.drop-subtitle {
    color: var(--text-secondary);
    margin: 5px 0;
}

.file-types {
    color: var(--text-secondary);
    font-size: 0.8rem;
    margin-top: 15px;
}

.file-input-container {
    position: relative;
    margin: 15px 0;
}

#scan_file {
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;
    width: 0.1px;
    height: 0.1px;
    overflow: hidden;
}

.browse-button {
    background-color: rgba(83, 109, 254, 0.2);
    color: var(--accent-color);
    border: 1px solid var(--accent-color);
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
}

.browse-button:hover {
    background-color: rgba(83, 109, 254, 0.3);
}


.hidden {
    display: none;
}

#selected-file-container {
    width: 100%;
    margin-top: 15px;
    animation: fadeIn 0.3s ease;
}

.selected-file {
    background-color: rgba(255, 255, 255, 0.08);
    padding: 10px 15px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.selected-file i {
    color: var(--primary-color);
    font-size: 1.2rem;
}

#filename-display {
    flex: 1;
    color: var(--text-primary);
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#remove-file {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    transition: color 0.3s;
}

#remove-file:hover {
    color: var(--danger-color);
}


.action-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 20px;
}

.primary-button {
    background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 8px;
}

.primary-button i {
    font-size: 1rem;
}

.primary-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(83, 109, 254, 0.4);
}

.primary-button:disabled {
    background: linear-gradient(135deg, #BDBDBD, #9E9E9E);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}


.results-header {
    padding: 15px;
    border-bottom: 1px solid var(--border-color);
}

.results-header h3 {
    display: flex;
    align-items: center;
    gap: 10px;
    color: var(--text-primary);
    font-weight: 500;
    font-size: 1.1rem;
}

.no-results {
    text-align: center;
    color: var(--text-secondary);
    padding: 30px 15px;
    font-style: italic;
}

.results-content {
    padding: 15px;
}

.result-item {
    display: flex;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.result-label {
    flex: 0 0 120px;
    color: var(--text-secondary);
    font-weight: 500;
}

.result-value {
    flex: 1;
    color: var(--text-primary);
}

.result-value.highlight {
    color: var(--primary-color);
    font-weight: 600;
}

.severity-indicator {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 3px;
    font-weight: 600;
    font-size: 0.8rem;
}

.severity-0 {
    background-color: rgba(76, 175, 80, 0.2);
    color: var(--success-color);
}

.severity-1 {
    background-color: rgba(255, 152, 0, 0.2);
    color: var(--warning-color);
}

.severity-2 {
    background-color: rgba(255, 87, 34, 0.2);
    color: #FF5722;
}

.severity-3 {
    background-color: rgba(244, 67, 54, 0.2);
    color: var(--danger-color);
}

.severity-scale {
    display: inline-flex;
    margin-left: 15px;
    align-items: center;
    gap: 5px;
}

.severity-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.2);
    transition: all 0.3s;
}

.severity-dot.active:nth-child(1) {
    background-color: var(--success-color);
}

.severity-dot.active:nth-child(2) {
    background-color: var(--warning-color);
}

.severity-dot.active:nth-child(3) {
    background-color: #FF5722;
}

.severity-dot.active:nth-child(4) {
    background-color: var(--danger-color);
}

.app-layout ~ .site-header,
.app-layout ~ footer {
    display: none;
}

.flash-messages {
    margin-bottom: 20px;
}

.alert {
    background-color: rgba(244, 67, 54, 0.1);
    color: var(--danger-color);
    border-left: 4px solid var(--danger-color);
    padding: 12px 15px;
    margin-bottom: 15px;
    border-radius: 4px;
    font-size: 0.9rem;
}


@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}


@media (max-width: 768px) {
    .analysis-container {
        flex-direction: column;
    }
    
    .results-container {
        margin-top: 20px;
    }
    
    .main-content {
        margin-left: 0;
        padding-left: var(--sidebar-width);
    }
    
    .sidebar {
        width: var(--sidebar-width);
    }
    
    .sidebar:hover {
        width: var(--sidebar-expanded);
    }
}


//pagina de javascript pentru home

document.addEventListener('DOMContentLoaded', function() {
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('scan_file');
    const browseButton = document.getElementById('browse-button');
    const filenameDisplay = document.getElementById('filename-display');
    const selectedFileContainer = document.getElementById('selected-file-container');
    const removeFileButton = document.getElementById('remove-file');
    const analyzeButton = document.getElementById('analyze-button');
    const menuToggle = document.getElementById('menu-toggle');
    const sidebar = document.querySelector('.sidebar');
    const form = document.getElementById('upload-form');


    if (!dropZone || !fileInput || !filenameDisplay || !form) {
        console.error("Essential elements not found!");
        return;
    }

    if (menuToggle && sidebar) {
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('expanded');
            document.querySelector('.main-content').classList.toggle('sidebar-expanded');
        });
    }


    if (browseButton) {
        browseButton.addEventListener('click', () => {
            fileInput.click();
        });
    }


    if (removeFileButton) {
        removeFileButton.addEventListener('click', () => {
            fileInput.value = '';
            selectedFileContainer.classList.add('hidden');
            analyzeButton.disabled = true;
            filenameDisplay.textContent = '';
            dropZone.classList.remove('file-selected');
        });
    }

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }


    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
        dropZone.classList.add('dragover');
    }

    function unhighlight(e) {
        dropZone.classList.remove('dragover');
    }


    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
    }

    fileInput.addEventListener('change', function(e) {
        handleFiles(this.files);
    });

    function handleFiles(files) {
        if (files.length > 0) {
            const file = files[0];
            
            const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
            if (!allowedTypes.includes(file.type)) {
                showAlert('Invalid file type. Please upload PNG, JPG, or JPEG.');
                resetFileInput();
                return;
            }

            filenameDisplay.textContent = file.name;
            selectedFileContainer.classList.remove('hidden');
            dropZone.classList.add('file-selected');
            analyzeButton.disabled = false;


        }
    }

    function showAlert(message) {

        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert';
        alertDiv.textContent = message;
        
        let flashContainer = document.querySelector('.flash-messages');
        if (!flashContainer) {
            flashContainer = document.createElement('div');
            flashContainer.className = 'flash-messages';
            const panelHeader = document.querySelector('.panel-header');
            panelHeader.parentNode.insertBefore(flashContainer, panelHeader.nextSibling);
        }
        
        flashContainer.appendChild(alertDiv);
        
        setTimeout(() => {
            alertDiv.remove();
            if (flashContainer.children.length === 0) {
                flashContainer.remove();
            }
        }, 5000);
    }

    function resetFileInput() {
        fileInput.value = '';
        selectedFileContainer.classList.add('hidden');
        analyzeButton.disabled = true;
    }

    function createImagePreview(file) {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            const previewContainer = document.createElement('div');
            previewContainer.className = 'file-preview';
            
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'preview-image';
            
            previewContainer.appendChild(img);
            
            const existingPreview = document.querySelector('.file-preview');
            if (existingPreview) {
                existingPreview.remove();
            }
            
            selectedFileContainer.appendChild(previewContainer);
        };
        
        reader.readAsDataURL(file);
    }

    const resultsContainer = document.getElementById('results-container');
    if (resultsContainer && resultsContainer.querySelector('.results-content')) {
        resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
});

//pagina de javascript pentru formularele de login/register

document.addEventListener('DOMContentLoaded', function() {
    const showRegisterForm = document.getElementById('show-register-form');
    const showLoginForm = document.getElementById('show-login-form');
    const flipContainer = document.createElement('div');
    const flipper = document.createElement('div');
    const formContent = document.querySelector('.form-content');
    const loginSection = document.getElementById('login-section');
    const registerSection = document.getElementById('register-section');
    
    if (showRegisterForm && showLoginForm && loginSection && registerSection && formContent) {

        flipContainer.className = 'form-flip-container';
        flipper.className = 'form-flipper';
        
        const parent = loginSection.parentNode;
        parent.insertBefore(flipContainer, loginSection);
        flipContainer.appendChild(flipper);

        flipper.appendChild(loginSection);
        flipper.appendChild(registerSection);
        

        showRegisterForm.addEventListener('click', function(e) {
            e.preventDefault();
            flipContainer.classList.add('flipped');
            document.title = "Medical Scan App - Register";
            
            setTimeout(updateContainerHeight, 50);
        });
        

        showLoginForm.addEventListener('click', function(e) {
            e.preventDefault();
            flipContainer.classList.remove('flipped');
            document.title = "Medical Scan App - Login";
            
            setTimeout(updateContainerHeight, 50);
        });
        
        updateContainerHeight();
    }
    

    function updateContainerHeight() {
        if (!flipContainer) return;
        

        const currentSection = flipContainer.classList.contains('flipped') ? 
            registerSection : loginSection;
            

        flipContainer.style.height = 'auto';
        
        const contentHeight = currentSection.offsetHeight;
        flipContainer.style.height = contentHeight + 'px';
    }
    
    const passwordToggles = document.querySelectorAll('.password-toggle');
    
    passwordToggles.forEach(function(toggle) {
        toggle.addEventListener('click', function(e) {
            e.preventDefault();
            
            const formGroup = this.closest('.form-group');
            if (!formGroup) return;
            
            const passwordField = formGroup.querySelector('input[type="password"], input[type="text"]');
            if (!passwordField) return;
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                this.textContent = 'Hide';
            } else {
                passwordField.type = 'password';
                this.textContent = 'Show';
            }
        });
    });
    

    window.addEventListener('resize', updateContainerHeight);

    const formInputs = document.querySelectorAll('.form-input');
    formInputs.forEach(input => {
        const originalPlaceholder = input.placeholder;

        input.style.color = '#202124';
        
        if (input.id.includes('password')) {
            input.type = 'password';
        }
        
        setTimeout(() => {
            input.placeholder = '';
            setTimeout(() => {
                input.placeholder = originalPlaceholder;
            }, 10);
        }, 10);
    });

    const style = document.createElement('style');
    style.textContent = `
        input:-webkit-autofill,
        input:-webkit-autofill:hover, 
        input:-webkit-autofill:focus {
            -webkit-text-fill-color: #202124 !important;
            transition: background-color 5000s ease-in-out 0s !important;
        }
    `;
    document.head.appendChild(style);
});


//codul javascript folosit pentru pagina de login

document.addEventListener('DOMContentLoaded', function() {
    const passwordInput = document.getElementById('password-input');
    const toggleLink = document.getElementById('password-toggle-link');

    if(passwordInput && toggleLink) {
        toggleLink.addEventListener('click', function (event) {

            event.preventDefault();

            const currentType = passwordInput.getAttribute('type');

            if(currentType == 'password') {
                passwordInput.setAttribute('type', 'text');
                this.textContent = 'Hide';
            } else {
                passwordInput.setAttribute('type', 'password');
                this.textContent = 'Show';
            }
        });
    }

});